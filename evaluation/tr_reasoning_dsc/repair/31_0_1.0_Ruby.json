{
    "oai_response": {
        "data": [
            {
                "content": "User: ['Fix a buggy program written in Ruby language to solve the following programming problem:\\nDescription: Imp is in a magic forest, where xorangles grow (wut?)  A xorangle of order n is such a non-degenerate triangle, that lengths of its sides are integers not exceeding n, and the xor-sum of the lengths is equal to zero. Imp has to count the number of distinct xorangles of order n to get out of the forest. Formally, for a given integer n you have to find the number of such triples (a,\\u2009b,\\u2009c), that:  1\\u2009\u2264\\u2009a\\u2009\u2264\\u2009b\\u2009\u2264\\u2009c\\u2009\u2264\\u2009n;  , where  denotes the bitwise xor of integers x and y.  (a,\\u2009b,\\u2009c) form a non-degenerate (with strictly positive area) triangle. \\nInput Specification: The only line contains a single integer n (1\\u2009\u2264\\u2009n\\u2009\u2264\\u20092500).\\nOutput Specification: Print the number of xorangles of order n.\\n\\nSample Input:\\n6\\nSample Output:\\n1\\n\\nSample Input:\\n10\\nSample Output:\\n2\\n\\nNotes: NoteThe only xorangle in the first sample is (3,\\u20095,\\u20096).\\nTake input from standard input and output to standard output\\n\\nHere is the code with a bug of TIME_LIMIT_EXCEEDED:\\n\\nn, res = gets.to_i, 0\\nh = {}\\na = (1..n).to_a\\nc = (1..n).to_a.combination(2).each do |x, y|\\n  h[[x, y]] = x^y\\nend\\nh.each do |k, v|\\n  res +=1 if v <= n && v > k.max && v < k[0]+k[1]\\nend\\nputs res\\n\\nProvide the fixed Ruby code without any description or extra tokens.\\n\\nFixed source code:', '']",
                "type": "text"
            }
        ],
        "prompt": [
            "Fix a buggy program written in Ruby language to solve the following programming problem:\nDescription: Imp is in a magic forest, where xorangles grow (wut?)  A xorangle of order n is such a non-degenerate triangle, that lengths of its sides are integers not exceeding n, and the xor-sum of the lengths is equal to zero. Imp has to count the number of distinct xorangles of order n to get out of the forest. Formally, for a given integer n you have to find the number of such triples (a,\u2009b,\u2009c), that:  1\u2009\u2264\u2009a\u2009\u2264\u2009b\u2009\u2264\u2009c\u2009\u2264\u2009n;  , where  denotes the bitwise xor of integers x and y.  (a,\u2009b,\u2009c) form a non-degenerate (with strictly positive area) triangle. \nInput Specification: The only line contains a single integer n (1\u2009\u2264\u2009n\u2009\u2264\u20092500).\nOutput Specification: Print the number of xorangles of order n.\n\nSample Input:\n6\nSample Output:\n1\n\nSample Input:\n10\nSample Output:\n2\n\nNotes: NoteThe only xorangle in the first sample is (3,\u20095,\u20096).\nTake input from standard input and output to standard output\n\nHere is the code with a bug of TIME_LIMIT_EXCEEDED:\n\nn, res = gets.to_i, 0\nh = {}\na = (1..n).to_a\nc = (1..n).to_a.combination(2).each do |x, y|\n  h[[x, y]] = x^y\nend\nh.each do |k, v|\n  res +=1 if v <= n && v > k.max && v < k[0]+k[1]\nend\nputs res\n\nProvide the fixed Ruby code without any description or extra tokens.\n\nFixed source code:",
            ""
        ]
    },
    "source_data": {
        "delete_cnt": 4,
        "fix_code_uid": "",
        "difficulty": 1300,
        "replace_cnt": 12,
        "fix_ops_cnt": 18,
        "prob_desc_output_spec": "Print the number of xorangles of order n.",
        "apr_id": "bb0ece8a7c9fbd0e6aaa5df5342f541d",
        "bug_source_code": "n, res = gets.to_i, 0\nh = {}\na = (1..n).to_a\nc = (1..n).to_a.combination(2).each do |x, y|\n  h[[x, y]] = x^y\nend\nh.each do |k, v|\n  res +=1 if v <= n && v > k.max && v < k[0]+k[1]\nend\nputs res",
        "prob_desc_input_spec": "The only line contains a single integer n (1\u2009\u2264\u2009n\u2009\u2264\u20092500).",
        "src_uid": "838f2e75fdff0f13f002c0dfff0b2e8d",
        "bug_code_uid": "954d01e1363c5514d1735ae3f2e7f2d8",
        "equal_cnt": 19,
        "prob_desc_time_limit": "1 second",
        "similarity_score": 0.40111419558525085,
        "bug_exec_outcome": "TIME_LIMIT_EXCEEDED",
        "lang_cluster": "Ruby",
        "potential_dominant_fix_op": "replace",
        "prob_desc_sample_inputs": [
            "6",
            "10"
        ],
        "prob_desc_input_from": "standard input",
        "prob_desc_description": "Imp is in a magic forest, where xorangles grow (wut?)  A xorangle of order n is such a non-degenerate triangle, that lengths of its sides are integers not exceeding n, and the xor-sum of the lengths is equal to zero. Imp has to count the number of distinct xorangles of order n to get out of the forest. Formally, for a given integer n you have to find the number of such triples (a,\u2009b,\u2009c), that:  1\u2009\u2264\u2009a\u2009\u2264\u2009b\u2009\u2264\u2009c\u2009\u2264\u2009n;  , where  denotes the bitwise xor of integers x and y.  (a,\u2009b,\u2009c) form a non-degenerate (with strictly positive area) triangle. ",
        "lang": "Ruby",
        "fix_exec_outcome": "",
        "insert_cnt": 2,
        "fix_source_code": "",
        "prob_desc_notes": "NoteThe only xorangle in the first sample is (3,\u20095,\u20096).",
        "file_name": "Ruby.jsonl",
        "tags": [
            "brute force"
        ],
        "prob_desc_output_to": "standard output",
        "prob_desc_created_at": "1518023700",
        "prob_desc_memory_limit": "256 megabytes",
        "prob_desc_sample_outputs": [
            "1",
            "2"
        ],
        "hidden_unit_tests": "[{\"input\": \"6\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"10\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"3\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"4\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"5\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"2500\\r\\n\", \"output\": [\"700393\"]}, {\"input\": \"952\\r\\n\", \"output\": [\"118547\"]}, {\"input\": \"88\\r\\n\", \"output\": [\"536\"]}, {\"input\": \"1216\\r\\n\", \"output\": [\"160822\"]}, {\"input\": \"2140\\r\\n\", \"output\": [\"614785\"]}, {\"input\": \"564\\r\\n\", \"output\": [\"35087\"]}, {\"input\": \"1488\\r\\n\", \"output\": [\"239580\"]}, {\"input\": \"116\\r\\n\", \"output\": [\"1332\"]}, {\"input\": \"1040\\r\\n\", \"output\": [\"145820\"]}, {\"input\": \"1965\\r\\n\", \"output\": [\"545494\"]}, {\"input\": \"593\\r\\n\", \"output\": [\"36605\"]}, {\"input\": \"779\\r\\n\", \"output\": [\"63500\"]}, {\"input\": \"1703\\r\\n\", \"output\": [\"352045\"]}, {\"input\": \"331\\r\\n\", \"output\": [\"9877\"]}, {\"input\": \"1051\\r\\n\", \"output\": [\"145985\"]}, {\"input\": \"2179\\r\\n\", \"output\": [\"618074\"]}, {\"input\": \"603\\r\\n\", \"output\": [\"37312\"]}, {\"input\": \"1731\\r\\n\", \"output\": [\"369691\"]}, {\"input\": \"2451\\r\\n\", \"output\": [\"681980\"]}, {\"input\": \"1079\\r\\n\", \"output\": [\"146833\"]}, {\"input\": \"2207\\r\\n\", \"output\": [\"621708\"]}, {\"input\": \"2394\\r\\n\", \"output\": [\"663240\"]}, {\"input\": \"818\\r\\n\", \"output\": [\"73972\"]}, {\"input\": \"1946\\r\\n\", \"output\": [\"529383\"]}, {\"input\": \"166\\r\\n\", \"output\": [\"2200\"]}, {\"input\": \"1294\\r\\n\", \"output\": [\"175915\"]}, {\"input\": \"2218\\r\\n\", \"output\": [\"623386\"]}, {\"input\": \"846\\r\\n\", \"output\": [\"82106\"]}, {\"input\": \"1566\\r\\n\", \"output\": [\"273341\"]}, {\"input\": \"194\\r\\n\", \"output\": [\"3240\"]}, {\"input\": \"1322\\r\\n\", \"output\": [\"183405\"]}, {\"input\": \"1508\\r\\n\", \"output\": [\"247634\"]}, {\"input\": \"2433\\r\\n\", \"output\": [\"675245\"]}, {\"input\": \"857\\r\\n\", \"output\": [\"85529\"]}, {\"input\": \"1781\\r\\n\", \"output\": [\"402718\"]}, {\"input\": \"1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"2\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"2444\\r\\n\", \"output\": [\"679373\"]}, {\"input\": \"2498\\r\\n\", \"output\": [\"699536\"]}]"
    }
}