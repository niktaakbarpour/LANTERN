{
    "oai_response": {
        "data": [
            {
                "content": "ruby\\na = gets.to_i\\nb = gets.to_i\\nc = gets.to_i\\nr = 0\\ns = 1\\nd = 2\\nf = 4\\nwhile s <= a\\n  if (b >= d) && (c >= f)\\n    r += 7\\n  end\\n  s += 1\\n  d += 2\\n  f += 4\\nend\\nputs r\\n",
                "type": "text"
            }
        ],
        "prompt": [
            "Fix a buggy program written in Ruby language to solve the following programming problem:\nDescription: Nikolay has a lemons, b apples and c pears. He decided to cook a compote. According to the recipe the fruits should be in the ratio 1:\u20092:\u20094. It means that for each lemon in the compote should be exactly 2 apples and exactly 4 pears. You can't crumble up, break up or cut these fruits into pieces. These fruits\u00a0\u2014 lemons, apples and pears\u00a0\u2014 should be put in the compote as whole fruits.Your task is to determine the maximum total number of lemons, apples and pears from which Nikolay can cook the compote. It is possible that Nikolay can't use any fruits, in this case print 0. \nInput Specification: The first line contains the positive integer a (1\u2009\u2264\u2009a\u2009\u2264\u20091000)\u00a0\u2014 the number of lemons Nikolay has.  The second line contains the positive integer b (1\u2009\u2264\u2009b\u2009\u2264\u20091000)\u00a0\u2014 the number of apples Nikolay has.  The third line contains the positive integer c (1\u2009\u2264\u2009c\u2009\u2264\u20091000)\u00a0\u2014 the number of pears Nikolay has.\nOutput Specification: Print the maximum total number of lemons, apples and pears from which Nikolay can cook the compote.\n\nSample Input:\n2\n5\n7\nSample Output:\n7\n\nSample Input:\n4\n7\n13\nSample Output:\n21\n\nSample Input:\n2\n3\n2\nSample Output:\n0\n\nNotes: NoteIn the first example Nikolay can use 1 lemon, 2 apples and 4 pears, so the answer is 1\u2009+\u20092\u2009+\u20094\u2009=\u20097.In the second example Nikolay can use 3 lemons, 6 apples and 12 pears, so the answer is 3\u2009+\u20096\u2009+\u200912\u2009=\u200921.In the third example Nikolay don't have enough pears to cook any compote, so the answer is 0. \nTake input from standard input and output to standard output\n\nHere is the code with a bug of WRONG_ANSWER:\n\n# https://codeforces.com/problemset/problem/746/A\na = gets.chomp.to_i\nb = gets.chomp.to_i\nc = gets.chomp.to_i\nr = 0\ns = 1\nd = 2\nf = 4\nwhile s != a\n  if (a >= s) && (b >= d) && (c >= f)\n    r += 7\n  end\n  s += 1\n  d += 2\n  f += 4\nend\np r\n\n\nProvide the fixed Ruby code without any description or extra tokens.\n\nFixed source code:",
            ""
        ]
    },
    "source_data": {
        "delete_cnt": 0,
        "fix_code_uid": "",
        "difficulty": 800,
        "replace_cnt": 1,
        "fix_ops_cnt": 1,
        "prob_desc_output_spec": "Print the maximum total number of lemons, apples and pears from which Nikolay can cook the compote.",
        "apr_id": "43fb62c26954ced8f20de8a0248b7caa",
        "bug_source_code": "# https://codeforces.com/problemset/problem/746/A\na = gets.chomp.to_i\nb = gets.chomp.to_i\nc = gets.chomp.to_i\nr = 0\ns = 1\nd = 2\nf = 4\nwhile s != a\n  if (a >= s) && (b >= d) && (c >= f)\n    r += 7\n  end\n  s += 1\n  d += 2\n  f += 4\nend\np r\n",
        "prob_desc_input_spec": "The first line contains the positive integer a (1\u2009\u2264\u2009a\u2009\u2264\u20091000)\u00a0\u2014 the number of lemons Nikolay has.  The second line contains the positive integer b (1\u2009\u2264\u2009b\u2009\u2264\u20091000)\u00a0\u2014 the number of apples Nikolay has.  The third line contains the positive integer c (1\u2009\u2264\u2009c\u2009\u2264\u20091000)\u00a0\u2014 the number of pears Nikolay has.",
        "src_uid": "82a4a60eac90765fb62f2a77d2305c01",
        "bug_code_uid": "0b3e7a88992b3a8378e2dcbf79e341c2",
        "equal_cnt": 2,
        "prob_desc_time_limit": "1 second",
        "similarity_score": 0.9957805871963501,
        "bug_exec_outcome": "WRONG_ANSWER",
        "lang_cluster": "Ruby",
        "potential_dominant_fix_op": "replace",
        "prob_desc_sample_inputs": [
            "2\n5\n7",
            "4\n7\n13",
            "2\n3\n2"
        ],
        "prob_desc_input_from": "standard input",
        "prob_desc_description": "Nikolay has a lemons, b apples and c pears. He decided to cook a compote. According to the recipe the fruits should be in the ratio 1:\u20092:\u20094. It means that for each lemon in the compote should be exactly 2 apples and exactly 4 pears. You can't crumble up, break up or cut these fruits into pieces. These fruits\u00a0\u2014 lemons, apples and pears\u00a0\u2014 should be put in the compote as whole fruits.Your task is to determine the maximum total number of lemons, apples and pears from which Nikolay can cook the compote. It is possible that Nikolay can't use any fruits, in this case print 0. ",
        "lang": "Ruby",
        "fix_exec_outcome": "",
        "insert_cnt": 0,
        "fix_source_code": "",
        "prob_desc_notes": "NoteIn the first example Nikolay can use 1 lemon, 2 apples and 4 pears, so the answer is 1\u2009+\u20092\u2009+\u20094\u2009=\u20097.In the second example Nikolay can use 3 lemons, 6 apples and 12 pears, so the answer is 3\u2009+\u20096\u2009+\u200912\u2009=\u200921.In the third example Nikolay don't have enough pears to cook any compote, so the answer is 0. ",
        "file_name": "Ruby.jsonl",
        "tags": [
            "math",
            "implementation"
        ],
        "prob_desc_output_to": "standard output",
        "prob_desc_created_at": "1482057300",
        "prob_desc_memory_limit": "256 megabytes",
        "prob_desc_sample_outputs": [
            "7",
            "21",
            "0"
        ],
        "hidden_unit_tests": "[{\"input\": \"2\\r\\n5\\r\\n7\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"4\\r\\n7\\r\\n13\\r\\n\", \"output\": [\"21\"]}, {\"input\": \"2\\r\\n3\\r\\n2\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1\\r\\n1\\r\\n1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1\\r\\n2\\r\\n4\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"1000\\r\\n1000\\r\\n1000\\r\\n\", \"output\": [\"1750\"]}, {\"input\": \"1\\r\\n1\\r\\n4\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1\\r\\n2\\r\\n3\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1\\r\\n1000\\r\\n1000\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"1000\\r\\n1\\r\\n1000\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1000\\r\\n2\\r\\n1000\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"1000\\r\\n500\\r\\n1000\\r\\n\", \"output\": [\"1750\"]}, {\"input\": \"1000\\r\\n1000\\r\\n4\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"1000\\r\\n1000\\r\\n3\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"4\\r\\n8\\r\\n12\\r\\n\", \"output\": [\"21\"]}, {\"input\": \"10\\r\\n20\\r\\n40\\r\\n\", \"output\": [\"70\"]}, {\"input\": \"100\\r\\n200\\r\\n399\\r\\n\", \"output\": [\"693\"]}, {\"input\": \"200\\r\\n400\\r\\n800\\r\\n\", \"output\": [\"1400\"]}, {\"input\": \"199\\r\\n400\\r\\n800\\r\\n\", \"output\": [\"1393\"]}, {\"input\": \"201\\r\\n400\\r\\n800\\r\\n\", \"output\": [\"1400\"]}, {\"input\": \"200\\r\\n399\\r\\n800\\r\\n\", \"output\": [\"1393\"]}, {\"input\": \"200\\r\\n401\\r\\n800\\r\\n\", \"output\": [\"1400\"]}, {\"input\": \"200\\r\\n400\\r\\n799\\r\\n\", \"output\": [\"1393\"]}, {\"input\": \"200\\r\\n400\\r\\n801\\r\\n\", \"output\": [\"1400\"]}, {\"input\": \"139\\r\\n252\\r\\n871\\r\\n\", \"output\": [\"882\"]}, {\"input\": \"109\\r\\n346\\r\\n811\\r\\n\", \"output\": [\"763\"]}, {\"input\": \"237\\r\\n487\\r\\n517\\r\\n\", \"output\": [\"903\"]}, {\"input\": \"161\\r\\n331\\r\\n725\\r\\n\", \"output\": [\"1127\"]}, {\"input\": \"39\\r\\n471\\r\\n665\\r\\n\", \"output\": [\"273\"]}, {\"input\": \"9\\r\\n270\\r\\n879\\r\\n\", \"output\": [\"63\"]}, {\"input\": \"137\\r\\n422\\r\\n812\\r\\n\", \"output\": [\"959\"]}, {\"input\": \"15\\r\\n313\\r\\n525\\r\\n\", \"output\": [\"105\"]}, {\"input\": \"189\\r\\n407\\r\\n966\\r\\n\", \"output\": [\"1323\"]}, {\"input\": \"18\\r\\n268\\r\\n538\\r\\n\", \"output\": [\"126\"]}, {\"input\": \"146\\r\\n421\\r\\n978\\r\\n\", \"output\": [\"1022\"]}, {\"input\": \"70\\r\\n311\\r\\n685\\r\\n\", \"output\": [\"490\"]}, {\"input\": \"244\\r\\n405\\r\\n625\\r\\n\", \"output\": [\"1092\"]}, {\"input\": \"168\\r\\n454\\r\\n832\\r\\n\", \"output\": [\"1176\"]}, {\"input\": \"46\\r\\n344\\r\\n772\\r\\n\", \"output\": [\"322\"]}, {\"input\": \"174\\r\\n438\\r\\n987\\r\\n\", \"output\": [\"1218\"]}, {\"input\": \"144\\r\\n387\\r\\n693\\r\\n\", \"output\": [\"1008\"]}, {\"input\": \"22\\r\\n481\\r\\n633\\r\\n\", \"output\": [\"154\"]}, {\"input\": \"196\\r\\n280\\r\\n848\\r\\n\", \"output\": [\"980\"]}, {\"input\": \"190\\r\\n454\\r\\n699\\r\\n\", \"output\": [\"1218\"]}, {\"input\": \"231\\r\\n464\\r\\n928\\r\\n\", \"output\": [\"1617\"]}, {\"input\": \"151\\r\\n308\\r\\n616\\r\\n\", \"output\": [\"1057\"]}, {\"input\": \"88\\r\\n182\\r\\n364\\r\\n\", \"output\": [\"616\"]}, {\"input\": \"12\\r\\n26\\r\\n52\\r\\n\", \"output\": [\"84\"]}, {\"input\": \"204\\r\\n412\\r\\n824\\r\\n\", \"output\": [\"1428\"]}, {\"input\": \"127\\r\\n256\\r\\n512\\r\\n\", \"output\": [\"889\"]}, {\"input\": \"224\\r\\n446\\r\\n896\\r\\n\", \"output\": [\"1561\"]}, {\"input\": \"146\\r\\n291\\r\\n584\\r\\n\", \"output\": [\"1015\"]}, {\"input\": \"83\\r\\n164\\r\\n332\\r\\n\", \"output\": [\"574\"]}, {\"input\": \"20\\r\\n38\\r\\n80\\r\\n\", \"output\": [\"133\"]}, {\"input\": \"198\\r\\n393\\r\\n792\\r\\n\", \"output\": [\"1372\"]}, {\"input\": \"120\\r\\n239\\r\\n480\\r\\n\", \"output\": [\"833\"]}, {\"input\": \"208\\r\\n416\\r\\n831\\r\\n\", \"output\": [\"1449\"]}, {\"input\": \"130\\r\\n260\\r\\n517\\r\\n\", \"output\": [\"903\"]}, {\"input\": \"67\\r\\n134\\r\\n267\\r\\n\", \"output\": [\"462\"]}, {\"input\": \"245\\r\\n490\\r\\n979\\r\\n\", \"output\": [\"1708\"]}, {\"input\": \"182\\r\\n364\\r\\n727\\r\\n\", \"output\": [\"1267\"]}, {\"input\": \"104\\r\\n208\\r\\n413\\r\\n\", \"output\": [\"721\"]}, {\"input\": \"10\\r\\n2\\r\\n100\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"2\\r\\n100\\r\\n100\\r\\n\", \"output\": [\"14\"]}, {\"input\": \"2\\r\\n3\\r\\n8\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"1\\r\\n2\\r\\n8\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"1\\r\\n2\\r\\n200\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"5\\r\\n4\\r\\n16\\r\\n\", \"output\": [\"14\"]}, {\"input\": \"1\\r\\n10\\r\\n10\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"1\\r\\n4\\r\\n8\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"100\\r\\n4\\r\\n1000\\r\\n\", \"output\": [\"14\"]}, {\"input\": \"2\\r\\n6\\r\\n12\\r\\n\", \"output\": [\"14\"]}, {\"input\": \"10\\r\\n7\\r\\n4\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"2\\r\\n10\\r\\n100\\r\\n\", \"output\": [\"14\"]}, {\"input\": \"2\\r\\n3\\r\\n4\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"1\\r\\n2\\r\\n999\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"1\\r\\n10\\r\\n20\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"100\\r\\n18\\r\\n20\\r\\n\", \"output\": [\"35\"]}, {\"input\": \"100\\r\\n1\\r\\n100\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"3\\r\\n7\\r\\n80\\r\\n\", \"output\": [\"21\"]}, {\"input\": \"2\\r\\n8\\r\\n24\\r\\n\", \"output\": [\"14\"]}, {\"input\": \"1\\r\\n100\\r\\n100\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"2\\r\\n1\\r\\n8\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"10\\r\\n5\\r\\n23\\r\\n\", \"output\": [\"14\"]}]"
    }
}