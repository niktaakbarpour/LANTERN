{
    "oai_response": null,
    "source_data": {
        "delete_cnt": 5,
        "fix_code_uid": "",
        "difficulty": 1900,
        "replace_cnt": 14,
        "fix_ops_cnt": 23,
        "prob_desc_output_spec": "Print n space-separated integers, representing the permutation that is the answer for the question. ",
        "apr_id": "28515f30a32304229dd96e85663281d2",
        "bug_source_code": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Globalization;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\nusing System.Threading;\n\n// (\u3065\u00b0\u03c9\u00b0)\u3065\uff90\u2605\u309c\u30fb\u3002\u3002\u30fb\u309c\u309c\u30fb\u3002\u3002\u30fb\u309c\u2606\u309c\u30fb\u3002\u3002\u30fb\u309c\u309c\u30fb\u3002\u3002\u30fb\u309c\npublic class Solver\n{\n    const long MAX = 2000000000000000000;\n    int n;\n    long[] f = new long[51];\n    long?[] mem = new long?[51];\n    List<int> ans = new List<int>();\n    long Fun(int x)\n    {\n        if (x == n)\n            return 1;\n        if (mem[x].HasValue)\n            return mem[x].Value;\n        long ret = 0;\n        for (int i = 1; x + i <= n; i++)\n            if (ret + 1.0 * f[i - 1] * Fun(x + i) > MAX)\n                ret = MAX;\n            else\n                ret += f[i - 1] * Fun(x + i);\n        return (mem[x] = ret).Value;\n    }\n\n    void Fun2(int x, long y)\n    {\n        if (x == n)\n            return;\n        for (int i = 1; x + i <= n; i++)\n            if (y - 1.0 * f[i - 1] * Fun(x + i) < 0)\n            {\n                long z = Fun(x + i);\n                ans.Add(x + i);\n                if (i > 1)\n                {\n                    var p = Nth(i - 1, y / z);\n                    foreach (int v in p)\n                        ans.Add(v + x);\n                }\n                Fun2(x + i, y % z);\n                return;\n            }\n            else\n                y -= f[i - 1] * Fun(x + i);\n        throw new Exception();\n    }\n\n    int[] Nth(int n, long m)\n    {\n        var p = Enumerable.Range(1, n).ToList();\n        var ret = new int[n];\n        for (int i = 0; i < n; i++)\n        {\n            long f = 1;\n            for (int j = 2; j <= n - i - 1; j++)\n                f = f * j;\n            int d = (int)(m / f);\n            ret[i] = p[d];\n            p.RemoveAt(d);\n            m %= f;\n        }\n\n        return ret;\n    }\n\n    void Solve()\n    {\n        f[0] = 1;\n        for (int i = 1; i <= 50; i++)\n            if (1.0 * f[i - 1] * i > MAX)\n                f[i] = MAX;\n            else\n                f[i] = f[i - 1] * i;\n\n        n = ReadInt();    \n        long m = ReadLong() - 1;\n\n        Fun2(0, m);\n        WriteArray(ans);\n    }\n\n    #region Main\n\n    protected static TextReader reader;\n    protected static TextWriter writer;\n    static void Main()\n    {\n#if DEBUG\n        reader = new StreamReader(\"..\\\\..\\\\input.txt\");\n        //reader = new StreamReader(Console.OpenStandardInput());\n        writer = Console.Out;\n        //writer = new StreamWriter(\"..\\\\..\\\\output.txt\");\n#else\n        reader = new StreamReader(Console.OpenStandardInput());\n        writer = new StreamWriter(Console.OpenStandardOutput());\n        //reader = new StreamReader(\"hull.in\");\n        //writer = new StreamWriter(\"hull.out\");\n#endif\n        try\n        {\n            //            var thread = new Thread(new Solver().Solve, 1024 * 1024 * 128);\n            //            thread.Start();\n            //            thread.Join();\n            checked\n            {\n                new Solver().Solve();\n            }\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(ex);\n#if DEBUG\n#else\n            throw;\n#endif\n        }\n        reader.Close();\n        writer.Close();\n    }\n\n    #endregion\n\n    #region Read / Write\n    private static Queue<string> currentLineTokens = new Queue<string>();\n    private static string[] ReadAndSplitLine() { return reader.ReadLine().Split(new[] { ' ', '\\t', }, StringSplitOptions.RemoveEmptyEntries); }\n    public static string ReadToken() { while (currentLineTokens.Count == 0)currentLineTokens = new Queue<string>(ReadAndSplitLine()); return currentLineTokens.Dequeue(); }\n    public static int ReadInt() { return int.Parse(ReadToken()); }\n    public static long ReadLong() { return long.Parse(ReadToken()); }\n    public static double ReadDouble() { return double.Parse(ReadToken(), CultureInfo.InvariantCulture); }\n    public static int[] ReadIntArray() { return ReadAndSplitLine().Select(int.Parse).ToArray(); }\n    public static long[] ReadLongArray() { return ReadAndSplitLine().Select(long.Parse).ToArray(); }\n    public static double[] ReadDoubleArray() { return ReadAndSplitLine().Select(s => double.Parse(s, CultureInfo.InvariantCulture)).ToArray(); }\n    public static int[][] ReadIntMatrix(int numberOfRows) { int[][] matrix = new int[numberOfRows][]; for (int i = 0; i < numberOfRows; i++)matrix[i] = ReadIntArray(); return matrix; }\n    public static int[][] ReadAndTransposeIntMatrix(int numberOfRows)\n    {\n        int[][] matrix = ReadIntMatrix(numberOfRows); int[][] ret = new int[matrix[0].Length][];\n        for (int i = 0; i < ret.Length; i++) { ret[i] = new int[numberOfRows]; for (int j = 0; j < numberOfRows; j++)ret[i][j] = matrix[j][i]; } return ret;\n    }\n    public static string[] ReadLines(int quantity) { string[] lines = new string[quantity]; for (int i = 0; i < quantity; i++)lines[i] = reader.ReadLine().Trim(); return lines; }\n    public static void WriteArray<T>(IEnumerable<T> array) { writer.WriteLine(string.Join(\" \", array)); }\n    public static void Write(params object[] array) { WriteArray(array); }\n    public static void WriteLines<T>(IEnumerable<T> array) { foreach (var a in array)writer.WriteLine(a); }\n    private class SDictionary<TKey, TValue> : Dictionary<TKey, TValue>\n    {\n        public new TValue this[TKey key]\n        {\n            get { return ContainsKey(key) ? base[key] : default(TValue); }\n            set { base[key] = value; }\n        }\n    }\n    private static T[] Init<T>(int size) where T : new() { var ret = new T[size]; for (int i = 0; i < size; i++)ret[i] = new T(); return ret; }\n    #endregion\n}",
        "prob_desc_input_spec": "The first line will contain two integers n, k (1\u2009\u2264\u2009n\u2009\u2264\u200950, 1\u2009\u2264\u2009k\u2009\u2264\u2009min{1018,\u2009l} where l is the length of the Kyoya's list).",
        "src_uid": "e03c6d3bb8cf9119530668765691a346",
        "bug_code_uid": "cbe259da9d0dd1913b8f61446ac603f3",
        "equal_cnt": 24,
        "prob_desc_time_limit": "2 seconds",
        "similarity_score": 0.7807258367538452,
        "bug_exec_outcome": "WRONG_ANSWER",
        "lang_cluster": "C#",
        "potential_dominant_fix_op": "replace",
        "prob_desc_sample_inputs": [
            "4 3",
            "10 1"
        ],
        "prob_desc_input_from": "standard input",
        "prob_desc_description": "Let's define the permutation of length n as an array p\u2009=\u2009[p1,\u2009p2,\u2009...,\u2009pn] consisting of n distinct integers from range from 1 to n. We say that this permutation maps value 1 into the value p1, value 2 into the value p2 and so on.Kyota Ootori has just learned about cyclic representation of a permutation. A cycle is a sequence of numbers such that each element of this sequence is being mapped into the next element of this sequence (and the last element of the cycle is being mapped into the first element of the cycle). The cyclic representation is a representation of p as a collection of cycles forming p. For example, permutation p\u2009=\u2009[4,\u20091,\u20096,\u20092,\u20095,\u20093] has a cyclic representation that looks like (142)(36)(5) because 1 is replaced by 4, 4 is replaced by 2, 2 is replaced by 1, 3 and 6 are swapped, and 5 remains in place. Permutation may have several cyclic representations, so Kyoya defines the standard cyclic representation of a permutation as follows. First, reorder the elements within each cycle so the largest element is first. Then, reorder all of the cycles so they are sorted by their first element. For our example above, the standard cyclic representation of [4,\u20091,\u20096,\u20092,\u20095,\u20093] is (421)(5)(63).Now, Kyoya notices that if we drop the parenthesis in the standard cyclic representation, we get another permutation! For instance, [4,\u20091,\u20096,\u20092,\u20095,\u20093] will become [4,\u20092,\u20091,\u20095,\u20096,\u20093].Kyoya notices that some permutations don't change after applying operation described above at all. He wrote all permutations of length n that do not change in a list in lexicographic order. Unfortunately, his friend Tamaki Suoh lost this list. Kyoya wishes to reproduce the list and he needs your help. Given the integers n and k, print the permutation that was k-th on Kyoya's list.",
        "lang": "MS C#",
        "fix_exec_outcome": "",
        "insert_cnt": 4,
        "fix_source_code": "",
        "prob_desc_notes": "NoteThe standard cycle representation is (1)(32)(4), which after removing parenthesis gives us the original permutation. The first permutation on the list would be [1,\u20092,\u20093,\u20094], while the second permutation would be [1,\u20092,\u20094,\u20093].",
        "file_name": "C#.jsonl",
        "tags": [
            "math",
            "greedy"
        ],
        "prob_desc_output_to": "standard output",
        "prob_desc_created_at": "1435163400",
        "prob_desc_memory_limit": "256 megabytes",
        "prob_desc_sample_outputs": [
            "1 3 2 4",
            "1 2 3 4 5 6 7 8 9 10"
        ],
        "hidden_unit_tests": "[{\"input\": \"4 3\\r\\n\", \"output\": [\"1 3 2 4\"]}, {\"input\": \"10 1\\r\\n\", \"output\": [\"1 2 3 4 5 6 7 8 9 10\"]}, {\"input\": \"1 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"50 1\\r\\n\", \"output\": [\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50\"]}, {\"input\": \"10 57\\r\\n\", \"output\": [\"2 1 3 4 5 6 7 8 10 9\"]}, {\"input\": \"50 20365011074\\r\\n\", \"output\": [\"2 1 4 3 6 5 8 7 10 9 12 11 14 13 16 15 18 17 20 19 22 21 24 23 26 25 28 27 30 29 32 31 34 33 36 35 38 37 40 39 42 41 44 43 46 45 48 47 50 49\"]}, {\"input\": \"20 9999\\r\\n\", \"output\": [\"2 1 4 3 5 7 6 8 9 10 11 13 12 14 15 17 16 18 19 20\"]}, {\"input\": \"49 12586269025\\r\\n\", \"output\": [\"2 1 4 3 6 5 8 7 10 9 12 11 14 13 16 15 18 17 20 19 22 21 24 23 26 25 28 27 30 29 32 31 34 33 36 35 38 37 40 39 42 41 44 43 46 45 48 47 49\"]}, {\"input\": \"49 1\\r\\n\", \"output\": [\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49\"]}, {\"input\": \"10 89\\r\\n\", \"output\": [\"2 1 4 3 6 5 8 7 10 9\"]}, {\"input\": \"10 1\\r\\n\", \"output\": [\"1 2 3 4 5 6 7 8 9 10\"]}, {\"input\": \"5 8\\r\\n\", \"output\": [\"2 1 4 3 5\"]}, {\"input\": \"5 1\\r\\n\", \"output\": [\"1 2 3 4 5\"]}, {\"input\": \"25 121393\\r\\n\", \"output\": [\"2 1 4 3 6 5 8 7 10 9 12 11 14 13 16 15 18 17 20 19 22 21 24 23 25\"]}, {\"input\": \"25 1\\r\\n\", \"output\": [\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\"]}, {\"input\": \"1 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2 2\\r\\n\", \"output\": [\"2 1\"]}, {\"input\": \"3 3\\r\\n\", \"output\": [\"2 1 3\"]}, {\"input\": \"4 2\\r\\n\", \"output\": [\"1 2 4 3\"]}, {\"input\": \"5 8\\r\\n\", \"output\": [\"2 1 4 3 5\"]}, {\"input\": \"6 10\\r\\n\", \"output\": [\"2 1 3 4 6 5\"]}, {\"input\": \"7 20\\r\\n\", \"output\": [\"2 1 4 3 5 7 6\"]}, {\"input\": \"8 24\\r\\n\", \"output\": [\"2 1 3 4 5 7 6 8\"]}, {\"input\": \"9 1\\r\\n\", \"output\": [\"1 2 3 4 5 6 7 8 9\"]}, {\"input\": \"10 24\\r\\n\", \"output\": [\"1 2 4 3 5 6 7 9 8 10\"]}, {\"input\": \"11 77\\r\\n\", \"output\": [\"1 3 2 5 4 6 7 8 9 10 11\"]}, {\"input\": \"12 101\\r\\n\", \"output\": [\"1 3 2 4 5 6 8 7 10 9 11 12\"]}, {\"input\": \"13 240\\r\\n\", \"output\": [\"2 1 3 4 5 6 7 8 10 9 11 13 12\"]}, {\"input\": \"14 356\\r\\n\", \"output\": [\"1 3 2 5 4 6 8 7 10 9 12 11 14 13\"]}, {\"input\": \"15 463\\r\\n\", \"output\": [\"1 3 2 4 5 7 6 9 8 11 10 12 13 15 14\"]}, {\"input\": \"16 747\\r\\n\", \"output\": [\"1 3 2 4 5 7 6 9 8 11 10 12 13 14 15 16\"]}, {\"input\": \"17 734\\r\\n\", \"output\": [\"1 2 4 3 5 6 8 7 10 9 11 12 13 14 15 16 17\"]}, {\"input\": \"18 1809\\r\\n\", \"output\": [\"1 3 2 4 5 6 8 7 10 9 11 12 14 13 16 15 18 17\"]}, {\"input\": \"19 859\\r\\n\", \"output\": [\"1 2 3 4 6 5 8 7 9 10 11 12 14 13 15 16 18 17 19\"]}, {\"input\": \"20 491\\r\\n\", \"output\": [\"1 2 3 4 5 6 8 7 9 11 10 12 14 13 15 16 18 17 19 20\"]}, {\"input\": \"21 14921\\r\\n\", \"output\": [\"2 1 3 5 4 7 6 9 8 10 11 12 13 15 14 16 18 17 19 20 21\"]}, {\"input\": \"22 731\\r\\n\", \"output\": [\"1 2 3 4 5 6 7 9 8 10 11 13 12 14 16 15 18 17 19 21 20 22\"]}, {\"input\": \"23 45599\\r\\n\", \"output\": [\"2 1 4 3 6 5 8 7 9 10 11 13 12 15 14 16 18 17 20 19 21 22 23\"]}, {\"input\": \"24 47430\\r\\n\", \"output\": [\"2 1 3 4 5 6 7 8 10 9 11 12 13 14 16 15 17 19 18 21 20 22 24 23\"]}, {\"input\": \"25 58467\\r\\n\", \"output\": [\"1 3 2 4 6 5 7 8 9 11 10 12 13 15 14 16 17 19 18 20 21 22 23 24 25\"]}, {\"input\": \"26 168988\\r\\n\", \"output\": [\"2 1 4 3 5 6 7 8 9 10 12 11 13 15 14 16 17 18 19 20 21 23 22 24 26 25\"]}, {\"input\": \"27 298209\\r\\n\", \"output\": [\"2 1 4 3 5 7 6 9 8 10 12 11 14 13 15 16 17 19 18 21 20 22 24 23 25 27 26\"]}, {\"input\": \"28 77078\\r\\n\", \"output\": [\"1 2 3 5 4 6 7 8 9 10 11 13 12 14 16 15 17 18 20 19 22 21 23 24 25 27 26 28\"]}, {\"input\": \"29 668648\\r\\n\", \"output\": [\"2 1 3 5 4 6 8 7 9 10 12 11 13 14 15 16 17 19 18 20 22 21 23 25 24 26 27 29 28\"]}, {\"input\": \"30 582773\\r\\n\", \"output\": [\"1 3 2 4 5 6 8 7 10 9 11 13 12 14 15 16 17 19 18 20 21 23 22 25 24 26 28 27 29 30\"]}, {\"input\": \"31 1899100\\r\\n\", \"output\": [\"2 1 4 3 5 6 7 8 10 9 11 13 12 15 14 16 17 19 18 21 20 23 22 24 26 25 28 27 29 31 30\"]}, {\"input\": \"32 1314567\\r\\n\", \"output\": [\"1 2 4 3 6 5 8 7 9 11 10 13 12 14 16 15 18 17 19 20 22 21 23 24 25 26 27 28 30 29 32 31\"]}, {\"input\": \"33 1811927\\r\\n\", \"output\": [\"1 2 4 3 5 7 6 9 8 10 11 13 12 15 14 16 18 17 19 21 20 22 23 24 25 26 27 28 29 31 30 32 33\"]}, {\"input\": \"34 2412850\\r\\n\", \"output\": [\"1 2 4 3 5 6 7 9 8 10 11 13 12 14 16 15 18 17 19 20 21 22 23 25 24 26 28 27 29 31 30 32 34 33\"]}, {\"input\": \"35 706065\\r\\n\", \"output\": [\"1 2 3 4 5 6 8 7 9 11 10 13 12 15 14 16 18 17 20 19 21 23 22 25 24 27 26 28 29 31 30 32 33 35 34\"]}, {\"input\": \"36 7074882\\r\\n\", \"output\": [\"1 2 4 3 5 7 6 8 9 10 11 12 13 14 16 15 18 17 19 20 22 21 23 25 24 26 27 28 30 29 32 31 33 34 35 36\"]}, {\"input\": \"37 27668397\\r\\n\", \"output\": [\"2 1 3 4 5 7 6 9 8 11 10 13 12 15 14 16 18 17 19 21 20 23 22 24 25 26 28 27 30 29 32 31 34 33 35 36 37\"]}, {\"input\": \"38 23790805\\r\\n\", \"output\": [\"1 2 4 3 6 5 8 7 10 9 11 12 14 13 15 16 18 17 20 19 21 22 24 23 25 27 26 29 28 31 30 32 33 34 36 35 38 37\"]}, {\"input\": \"39 68773650\\r\\n\", \"output\": [\"2 1 3 4 5 6 8 7 10 9 12 11 13 15 14 16 17 19 18 20 21 23 22 24 26 25 28 27 29 31 30 32 33 34 35 36 37 39 38\"]}, {\"input\": \"40 43782404\\r\\n\", \"output\": [\"1 2 4 3 5 6 7 9 8 10 12 11 14 13 15 16 17 18 20 19 21 22 23 25 24 26 28 27 29 31 30 32 34 33 36 35 37 39 38 40\"]}, {\"input\": \"41 130268954\\r\\n\", \"output\": [\"1 3 2 4 6 5 7 8 10 9 11 12 13 14 16 15 17 19 18 20 21 23 22 25 24 26 27 28 30 29 31 32 34 33 35 36 37 38 39 41 40\"]}, {\"input\": \"42 40985206\\r\\n\", \"output\": [\"1 2 3 4 6 5 7 8 9 10 11 13 12 15 14 16 17 18 19 21 20 22 24 23 25 26 28 27 29 30 31 33 32 35 34 36 37 39 38 40 42 41\"]}, {\"input\": \"43 193787781\\r\\n\", \"output\": [\"1 2 4 3 5 6 8 7 9 10 12 11 13 14 16 15 17 18 19 20 21 22 24 23 25 26 27 28 29 30 31 32 33 35 34 36 38 37 39 40 41 43 42\"]}, {\"input\": \"44 863791309\\r\\n\", \"output\": [\"2 1 3 4 6 5 8 7 10 9 12 11 13 14 15 16 18 17 19 20 21 22 23 24 26 25 27 29 28 31 30 32 34 33 36 35 38 37 40 39 41 42 44 43\"]}, {\"input\": \"45 1817653076\\r\\n\", \"output\": [\"2 1 4 3 6 5 8 7 9 11 10 12 14 13 16 15 18 17 19 20 22 21 24 23 25 27 26 29 28 30 32 31 34 33 35 36 38 37 39 40 42 41 43 44 45\"]}, {\"input\": \"46 1176411936\\r\\n\", \"output\": [\"1 3 2 4 5 6 7 8 10 9 11 12 13 14 16 15 17 18 19 21 20 22 23 25 24 27 26 29 28 31 30 32 34 33 35 37 36 38 40 39 41 42 43 44 46 45\"]}, {\"input\": \"47 4199125763\\r\\n\", \"output\": [\"2 1 4 3 5 6 7 8 10 9 12 11 13 14 16 15 18 17 20 19 22 21 23 24 25 27 26 28 30 29 31 32 33 34 36 35 38 37 39 40 41 43 42 44 45 46 47\"]}, {\"input\": \"48 4534695914\\r\\n\", \"output\": [\"1 3 2 5 4 6 8 7 10 9 12 11 14 13 15 17 16 18 19 21 20 23 22 25 24 26 27 28 29 30 31 32 33 34 36 35 37 38 40 39 41 43 42 44 46 45 47 48\"]}, {\"input\": \"49 3790978105\\r\\n\", \"output\": [\"1 2 4 3 5 7 6 8 9 11 10 12 13 15 14 16 17 18 19 21 20 22 24 23 25 27 26 28 30 29 31 33 32 35 34 37 36 38 39 41 40 42 44 43 45 47 46 48 49\"]}, {\"input\": \"50 5608642004\\r\\n\", \"output\": [\"1 2 4 3 5 6 8 7 9 10 11 13 12 15 14 17 16 18 20 19 22 21 23 24 25 26 28 27 30 29 31 32 33 34 35 36 38 37 40 39 42 41 44 43 45 46 47 48 50 49\"]}]"
    }
}