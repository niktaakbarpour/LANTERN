{
    "oai_response": {
        "choices": [
            {
                "message": {
                    "role": "assistant",
                    "content": "```csharp\nusing System;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        int n = Int32.Parse(Console.ReadLine());\n\n        double a = 1.0;\n        double b = n;\n\n        while(a <= b)\n        {\n            double mid = (a + b) / 2;\n            double val = mid * Math.Floor(n / mid);\n            \n            if(val < n)\n                a = mid + 1;\n            else\n                b = mid - 1;\n        }\n\n        Console.WriteLine($\"{(int)a} {(int)Math.Floor(n / a)}\");\n    }\n}\n```"
                }
            }
        ],
        "prompt": [
            "Fix a buggy program written in C# language to solve the following programming problem:\nDescription: A big company decided to launch a new series of rectangular displays, and decided that the display must have exactly n pixels. Your task is to determine the size of the rectangular display \u2014 the number of lines (rows) of pixels a and the number of columns of pixels b, so that:  there are exactly n pixels on the display;  the number of rows does not exceed the number of columns, it means a\u2009\u2264\u2009b;  the difference b\u2009-\u2009a is as small as possible. \nInput Specification: The first line contains the positive integer n (1\u2009\u2264\u2009n\u2009\u2264\u2009106)\u00a0\u2014 the number of pixels display should have.\nOutput Specification: Print two integers\u00a0\u2014 the number of rows and columns on the display. \n\nSample Input:\n8\nSample Output:\n2 4\n\nSample Input:\n64\nSample Output:\n8 8\n\nSample Input:\n5\nSample Output:\n1 5\n\nSample Input:\n999999\nSample Output:\n999 1001\n\nNotes: NoteIn the first example the minimum possible difference equals 2, so on the display should be 2 rows of 4 pixels.In the second example the minimum possible difference equals 0, so on the display should be 8 rows of 8 pixels.In the third example the minimum possible difference equals 4, so on the display should be 1 row of 5 pixels.\nTake input from standard input and output to standard output\n\nHere is the code with a bug of TIME_LIMIT_EXCEEDED:\n\n\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Pixels\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            int n = Int32.Parse(System.Console.ReadLine());\n            int min = Int32.MaxValue;\n\n            int start = n / 2;\n            int a = start, b = start;\n\n            for(int i = n; i > 0; i--)\n            {\n                int j = i;\n                while (i * j <= n)\n                {\n                    if (i * j == n)\n                    {\n                        if (min > b - a)\n                        {\n                            a = i;\n                            b = j;\n                            min = b - a;\n                        }\n                    }\n                    j++;\n                }\n            }\n\n            Console.WriteLine(String.Format(\"{0} {1}\", a, b));\n        }\n    }\n}\n\n\nProvide the fixed C# code without any description or extra tokens.\n\nFixed source code:",
            ""
        ]
    },
    "source_data": {
        "delete_cnt": 0,
        "fix_code_uid": "",
        "difficulty": 800,
        "replace_cnt": 2,
        "fix_ops_cnt": 3,
        "prob_desc_output_spec": "Print two integers\u00a0\u2014 the number of rows and columns on the display. ",
        "apr_id": "5b9a1af224a203227716e51edf933447",
        "bug_source_code": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Pixels\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            int n = Int32.Parse(System.Console.ReadLine());\n            int min = Int32.MaxValue;\n\n            int start = n / 2;\n            int a = start, b = start;\n\n            for(int i = n; i > 0; i--)\n            {\n                int j = i;\n                while (i * j <= n)\n                {\n                    if (i * j == n)\n                    {\n                        if (min > b - a)\n                        {\n                            a = i;\n                            b = j;\n                            min = b - a;\n                        }\n                    }\n                    j++;\n                }\n            }\n\n            Console.WriteLine(String.Format(\"{0} {1}\", a, b));\n        }\n    }\n}\n",
        "prob_desc_input_spec": "The first line contains the positive integer n (1\u2009\u2264\u2009n\u2009\u2264\u2009106)\u00a0\u2014 the number of pixels display should have.",
        "src_uid": "f52af273954798a4ae38a1378bfbf77a",
        "bug_code_uid": "7ac6021b57b32a506a928943b42fc19d",
        "equal_cnt": 4,
        "prob_desc_time_limit": "1 second",
        "similarity_score": 0.9700157642364502,
        "bug_exec_outcome": "TIME_LIMIT_EXCEEDED",
        "lang_cluster": "C#",
        "potential_dominant_fix_op": "replace",
        "prob_desc_sample_inputs": [
            "8",
            "64",
            "5",
            "999999"
        ],
        "prob_desc_input_from": "standard input",
        "prob_desc_description": "A big company decided to launch a new series of rectangular displays, and decided that the display must have exactly n pixels. Your task is to determine the size of the rectangular display \u2014 the number of lines (rows) of pixels a and the number of columns of pixels b, so that:  there are exactly n pixels on the display;  the number of rows does not exceed the number of columns, it means a\u2009\u2264\u2009b;  the difference b\u2009-\u2009a is as small as possible. ",
        "lang": "MS C#",
        "fix_exec_outcome": "",
        "insert_cnt": 1,
        "fix_source_code": "",
        "prob_desc_notes": "NoteIn the first example the minimum possible difference equals 2, so on the display should be 2 rows of 4 pixels.In the second example the minimum possible difference equals 0, so on the display should be 8 rows of 8 pixels.In the third example the minimum possible difference equals 4, so on the display should be 1 row of 5 pixels.",
        "file_name": "C#.jsonl",
        "tags": [
            "math",
            "brute force"
        ],
        "prob_desc_output_to": "standard output",
        "prob_desc_created_at": "1482113100",
        "prob_desc_memory_limit": "256 megabytes",
        "prob_desc_sample_outputs": [
            "2 4",
            "8 8",
            "1 5",
            "999 1001"
        ],
        "hidden_unit_tests": "[{\"input\": \"8\\r\\n\", \"output\": [\"2 4\"]}, {\"input\": \"64\\r\\n\", \"output\": [\"8 8\"]}, {\"input\": \"5\\r\\n\", \"output\": [\"1 5\"]}, {\"input\": \"999999\\r\\n\", \"output\": [\"999 1001\"]}, {\"input\": \"716539\\r\\n\", \"output\": [\"97 7387\"]}, {\"input\": \"1\\r\\n\", \"output\": [\"1 1\"]}, {\"input\": \"2\\r\\n\", \"output\": [\"1 2\"]}, {\"input\": \"3\\r\\n\", \"output\": [\"1 3\"]}, {\"input\": \"4\\r\\n\", \"output\": [\"2 2\"]}, {\"input\": \"6\\r\\n\", \"output\": [\"2 3\"]}, {\"input\": \"7\\r\\n\", \"output\": [\"1 7\"]}, {\"input\": \"9\\r\\n\", \"output\": [\"3 3\"]}, {\"input\": \"10\\r\\n\", \"output\": [\"2 5\"]}, {\"input\": \"11\\r\\n\", \"output\": [\"1 11\"]}, {\"input\": \"12\\r\\n\", \"output\": [\"3 4\"]}, {\"input\": \"15\\r\\n\", \"output\": [\"3 5\"]}, {\"input\": \"100\\r\\n\", \"output\": [\"10 10\"]}, {\"input\": \"101\\r\\n\", \"output\": [\"1 101\"]}, {\"input\": \"169\\r\\n\", \"output\": [\"13 13\"]}, {\"input\": \"179\\r\\n\", \"output\": [\"1 179\"]}, {\"input\": \"190\\r\\n\", \"output\": [\"10 19\"]}, {\"input\": \"1000\\r\\n\", \"output\": [\"25 40\"]}, {\"input\": \"10000\\r\\n\", \"output\": [\"100 100\"]}, {\"input\": \"10001\\r\\n\", \"output\": [\"73 137\"]}, {\"input\": \"100000\\r\\n\", \"output\": [\"250 400\"]}, {\"input\": \"100001\\r\\n\", \"output\": [\"11 9091\"]}, {\"input\": \"1000000\\r\\n\", \"output\": [\"1000 1000\"]}, {\"input\": \"999983\\r\\n\", \"output\": [\"1 999983\"]}, {\"input\": \"524288\\r\\n\", \"output\": [\"512 1024\"]}, {\"input\": \"954493\\r\\n\", \"output\": [\"971 983\"]}, {\"input\": \"966289\\r\\n\", \"output\": [\"983 983\"]}, {\"input\": \"944663\\r\\n\", \"output\": [\"961 983\"]}, {\"input\": \"912673\\r\\n\", \"output\": [\"97 9409\"]}, {\"input\": \"732641\\r\\n\", \"output\": [\"679 1079\"]}, {\"input\": \"232897\\r\\n\", \"output\": [\"343 679\"]}, {\"input\": \"16807\\r\\n\", \"output\": [\"49 343\"]}, {\"input\": \"999958\\r\\n\", \"output\": [\"2 499979\"]}, {\"input\": \"990151\\r\\n\", \"output\": [\"1 990151\"]}, {\"input\": \"997002\\r\\n\", \"output\": [\"998 999\"]}, {\"input\": \"20\\r\\n\", \"output\": [\"4 5\"]}, {\"input\": \"20261\\r\\n\", \"output\": [\"1 20261\"]}, {\"input\": \"999123\\r\\n\", \"output\": [\"3 333041\"]}, {\"input\": \"901841\\r\\n\", \"output\": [\"1 901841\"]}]"
    }
}