{
    "oai_response": {
        "choices": [
            {
                "message": {
                    "role": "assistant",
                    "content": "```csharp\n\ufeffusing System;\nusing System.IO;\nusing System.Linq;\n\nnamespace CF317\n{\n    internal class Program\n    {\n        private static void Main(string[] args)\n        {\n            var sr = new InputReader(Console.In);\n            var task = new Task();\n            using (var sw = Console.Out)\n            {\n                task.Solve(sr, sw);\n            }\n        }\n    }\n\n    internal class Task\n    {\n        public void Solve(InputReader sr, TextWriter sw)\n        {\n            var input = sr.NextSplitStrings().Select(Int32.Parse).ToArray();\n            var n = input[0];\n            var m = input[1];\n            var c0 = input[2];\n            var d0 = input[3];\n\n            var dp = new int[n+1, m+1];\n            for(var i=1;i<=n;i++)\n            {\n                dp[i, 0] = dp[i-1, 0] + ((i >= c0) ? d0 : 0);\n                for(var j=1;j<=m;j++)\n                {\n                    var next = sr.NextSplitStrings().Select(Int32.Parse).ToArray();\n                    var ai = next[0];\n                    var bi = next[1];\n                    var ci = next[2];\n                    var di = next[3];\n                    for(var k=0; k<ai/bi && k*ci<=i; k++)\n                    {\n                        var prev = k*ci >= bi ? dp[i - bi*k, j - 1] + k*di : 0;\n                        dp[i, j] = Math.Max(dp[i, j], prev);\n                    }\n                    dp[i, j] = Math.Max(dp[i, j], dp[i, j-1]);\n                }\n            }\n\n            sw.WriteLine(dp[n, m]);\n        }\n    }\n}\n\ninternal class InputReader : IDisposable\n{\n    private readonly TextReader sr;\n    private bool disposed = false;\n\n    public InputReader(TextReader sr)\n    {\n        this.sr = sr;\n    }\n\n    public string[] NextSplitStrings()\n    {\n        return sr.ReadLine().Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);\n    }\n\n    public void Dispose()\n    {\n        Dispose(true);\n        GC.SuppressFinalize(this);\n    }\n\n    protected virtual void Dispose(bool disposing)\n    {\n        if (!disposed)\n        {\n            if (disposing)\n            {\n                sr.Close();\n            }\n            disposed = true;\n        }\n    }\n}\n```"
                }
            }
        ],
        "prompt": [
            "Fix a buggy program written in C# language to solve the following programming problem:\nDescription: Lavrenty, a baker, is going to make several buns with stuffings and sell them.Lavrenty has n grams of dough as well as m different stuffing types. The stuffing types are numerated from 1 to m. Lavrenty knows that he has ai grams left of the i-th stuffing. It takes exactly bi grams of stuffing i and ci grams of dough to cook a bun with the i-th stuffing. Such bun can be sold for di tugriks.Also he can make buns without stuffings. Each of such buns requires c0 grams of dough and it can be sold for d0 tugriks. So Lavrenty can cook any number of buns with different stuffings or without it unless he runs out of dough and the stuffings. Lavrenty throws away all excess material left after baking.Find the maximum number of tugriks Lavrenty can earn.\nInput Specification: The first line contains 4 integers n, m, c0 and d0 (1\u2009\u2264\u2009n\u2009\u2264\u20091000, 1\u2009\u2264\u2009m\u2009\u2264\u200910, 1\u2009\u2264\u2009c0,\u2009d0\u2009\u2264\u2009100). Each of the following m lines contains 4 integers. The i-th line contains numbers ai, bi, ci and di (1\u2009\u2264\u2009ai,\u2009bi,\u2009ci,\u2009di\u2009\u2264\u2009100).\nOutput Specification: Print the only number \u2014 the maximum number of tugriks Lavrenty can earn.\n\nSample Input:\n10 2 2 1\n7 3 2 100\n12 3 1 10\nSample Output:\n241\n\nSample Input:\n100 1 25 50\n15 5 20 10\nSample Output:\n200\n\nNotes: NoteTo get the maximum number of tugriks in the first sample, you need to cook 2 buns with stuffing 1, 4 buns with stuffing 2 and a bun without any stuffing.In the second sample Lavrenty should cook 4 buns without stuffings.\nTake input from standard input and output to standard output\n\nHere is the code with a bug of WRONG_ANSWER:\n\n\ufeffusing System;\nusing System.Globalization;\nusing System.IO;\nusing System.Linq;\n\nnamespace CF317\n{\n\tinternal class Program\n\t{\n\t\tprivate static void Main(string[] args)\n\t\t{\n\t\t\tvar sr = new InputReader(Console.In);\n\t\t\t//var sr = new InputReader(new StreamReader(\"input.txt\"));\n\t\t\tvar task = new Task();\n\t\t\tusing (var sw = Console.Out)\n\t\t\t\t//using (var sw = new StreamWriter(\"output.txt\"))\n\t\t\t{\n\t\t\t\ttask.Solve(sr, sw);\n\t\t\t\t//Console.ReadKey();\n\t\t\t}\n\t\t}\n\t}\n\n\tinternal class Task\n\t{\n\t\tprivate int[] a;\n\t\tprivate int[] b;\n\t\tprivate int[] c;\n\t\tprivate int[] d;\n\n\t\tpublic void Solve(InputReader sr, TextWriter sw)\n\t\t{\n\t\t\tvar input = sr.ReadArray(Int32.Parse);\n\t\t\tvar n = input[0];\n\t\t\tvar m = input[1];\n\t\t\tvar cTesto = input[2];\n\t\t\tvar dTesto = input[3];\n\t\t\ta = new int[m];\n\t\t\tb = new int[m];\n\t\t\tc = new int[m];\n\t\t\td = new int[m];\n\t\t\tfor (var i = 0; i < m; i++) {\n\t\t\t\tinput = sr.ReadArray(Int32.Parse);\n\t\t\t\ta[i] = input[0];\n\t\t\t\tb[i] = input[1];\n\t\t\t\tc[i] = input[2];\n\t\t\t\td[i] = input[3];\n\t\t\t}\n\t\t\tvar dp = new int[n + 1, m + 1];\n\t\t\tfor (var i = 1; i <= n; i++) {\n\t\t\t\tfor (var j = 1; j <= m; j++) {\n\t\t\t\t\tfor (var k = 1; k <= a[j - 1] / b[j - 1]; k++) {\n\t\t\t\t\t\tif (i - c[j - 1] * k >= 0) {\n\t\t\t\t\t\t\tdp[i, j] = Math.Max(dp[i, j], dp[i - c[j - 1] * k, j - 1] + k * d[j - 1]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tvar max = 0;\n\t\t\tfor (var i = 0; i <= n; i++) {\n\t\t\t\tfor (var j = 1; j <= m; j++) {\n\t\t\t\t\tmax = Math.Max(dp[i, j] + ((n - i) / cTesto) * dTesto, max);\n\t\t\t\t}\n\t\t\t}\n\t\t\tsw.WriteLine(max);\n\t\t}\n\t}\n}\n\ninternal class InputReader : IDisposable\n{\n\tprivate bool isDispose;\n\tprivate readonly TextReader sr;\n\n\tpublic InputReader(TextReader stream)\n\t{\n\t\tsr = stream;\n\t}\n\n\tpublic void Dispose()\n\t{\n\t\tDispose(true);\n\t\tGC.SuppressFinalize(this);\n\t}\n\n\tpublic string NextString()\n\t{\n\t\tvar result = sr.ReadLine();\n\t\treturn result;\n\t}\n\n\tpublic int NextInt32()\n\t{\n\t\treturn Int32.Parse(NextString());\n\t}\n\n\tpublic long NextInt64()\n\t{\n\t\treturn Int64.Parse(NextString());\n\t}\n\n\tpublic string[] NextSplitStrings()\n\t{\n\t\treturn NextString()\n\t\t\t.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);\n\t}\n\n\tpublic T[] ReadArray<T>(Func<string, CultureInfo, T> func)\n\t{\n\t\treturn NextSplitStrings()\n\t\t\t.Select(s => func(s, CultureInfo.InvariantCulture))\n\t\t\t.ToArray();\n\t}\n\n\tpublic T[] ReadArrayFromString<T>(Func<string, CultureInfo, T> func, string str)\n\t{\n\t\treturn\n\t\t\tstr.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries)\n\t\t\t\t.Select(s => func(s, CultureInfo.InvariantCulture))\n\t\t\t\t.ToArray();\n\t}\n\n\tprotected void Dispose(bool dispose)\n\t{\n\t\tif (!isDispose) {\n\t\t\tif (dispose)\n\t\t\t\tsr.Close();\n\t\t\tisDispose = true;\n\t\t}\n\t}\n\n\t~InputReader()\n\t{\n\t\tDispose(false);\n\t}\n}\n\nProvide the fixed C# code without any description or extra tokens.\n\nFixed source code:",
            ""
        ]
    },
    "source_data": {
        "delete_cnt": 0,
        "fix_code_uid": "",
        "difficulty": 1700,
        "replace_cnt": 3,
        "fix_ops_cnt": 3,
        "prob_desc_output_spec": "Print the only number \u2014 the maximum number of tugriks Lavrenty can earn.",
        "apr_id": "86ac8d05fd6655b9332fd59e56cc65c3",
        "bug_source_code": "\ufeffusing System;\nusing System.Globalization;\nusing System.IO;\nusing System.Linq;\n\nnamespace CF317\n{\n\tinternal class Program\n\t{\n\t\tprivate static void Main(string[] args)\n\t\t{\n\t\t\tvar sr = new InputReader(Console.In);\n\t\t\t//var sr = new InputReader(new StreamReader(\"input.txt\"));\n\t\t\tvar task = new Task();\n\t\t\tusing (var sw = Console.Out)\n\t\t\t\t//using (var sw = new StreamWriter(\"output.txt\"))\n\t\t\t{\n\t\t\t\ttask.Solve(sr, sw);\n\t\t\t\t//Console.ReadKey();\n\t\t\t}\n\t\t}\n\t}\n\n\tinternal class Task\n\t{\n\t\tprivate int[] a;\n\t\tprivate int[] b;\n\t\tprivate int[] c;\n\t\tprivate int[] d;\n\n\t\tpublic void Solve(InputReader sr, TextWriter sw)\n\t\t{\n\t\t\tvar input = sr.ReadArray(Int32.Parse);\n\t\t\tvar n = input[0];\n\t\t\tvar m = input[1];\n\t\t\tvar cTesto = input[2];\n\t\t\tvar dTesto = input[3];\n\t\t\ta = new int[m];\n\t\t\tb = new int[m];\n\t\t\tc = new int[m];\n\t\t\td = new int[m];\n\t\t\tfor (var i = 0; i < m; i++) {\n\t\t\t\tinput = sr.ReadArray(Int32.Parse);\n\t\t\t\ta[i] = input[0];\n\t\t\t\tb[i] = input[1];\n\t\t\t\tc[i] = input[2];\n\t\t\t\td[i] = input[3];\n\t\t\t}\n\t\t\tvar dp = new int[n + 1, m + 1];\n\t\t\tfor (var i = 1; i <= n; i++) {\n\t\t\t\tfor (var j = 1; j <= m; j++) {\n\t\t\t\t\tfor (var k = 1; k <= a[j - 1] / b[j - 1]; k++) {\n\t\t\t\t\t\tif (i - c[j - 1] * k >= 0) {\n\t\t\t\t\t\t\tdp[i, j] = Math.Max(dp[i, j], dp[i - c[j - 1] * k, j - 1] + k * d[j - 1]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tvar max = 0;\n\t\t\tfor (var i = 0; i <= n; i++) {\n\t\t\t\tfor (var j = 1; j <= m; j++) {\n\t\t\t\t\tmax = Math.Max(dp[i, j] + ((n - i) / cTesto) * dTesto, max);\n\t\t\t\t}\n\t\t\t}\n\t\t\tsw.WriteLine(max);\n\t\t}\n\t}\n}\n\ninternal class InputReader : IDisposable\n{\n\tprivate bool isDispose;\n\tprivate readonly TextReader sr;\n\n\tpublic InputReader(TextReader stream)\n\t{\n\t\tsr = stream;\n\t}\n\n\tpublic void Dispose()\n\t{\n\t\tDispose(true);\n\t\tGC.SuppressFinalize(this);\n\t}\n\n\tpublic string NextString()\n\t{\n\t\tvar result = sr.ReadLine();\n\t\treturn result;\n\t}\n\n\tpublic int NextInt32()\n\t{\n\t\treturn Int32.Parse(NextString());\n\t}\n\n\tpublic long NextInt64()\n\t{\n\t\treturn Int64.Parse(NextString());\n\t}\n\n\tpublic string[] NextSplitStrings()\n\t{\n\t\treturn NextString()\n\t\t\t.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);\n\t}\n\n\tpublic T[] ReadArray<T>(Func<string, CultureInfo, T> func)\n\t{\n\t\treturn NextSplitStrings()\n\t\t\t.Select(s => func(s, CultureInfo.InvariantCulture))\n\t\t\t.ToArray();\n\t}\n\n\tpublic T[] ReadArrayFromString<T>(Func<string, CultureInfo, T> func, string str)\n\t{\n\t\treturn\n\t\t\tstr.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries)\n\t\t\t\t.Select(s => func(s, CultureInfo.InvariantCulture))\n\t\t\t\t.ToArray();\n\t}\n\n\tprotected void Dispose(bool dispose)\n\t{\n\t\tif (!isDispose) {\n\t\t\tif (dispose)\n\t\t\t\tsr.Close();\n\t\t\tisDispose = true;\n\t\t}\n\t}\n\n\t~InputReader()\n\t{\n\t\tDispose(false);\n\t}\n}",
        "prob_desc_input_spec": "The first line contains 4 integers n, m, c0 and d0 (1\u2009\u2264\u2009n\u2009\u2264\u20091000, 1\u2009\u2264\u2009m\u2009\u2264\u200910, 1\u2009\u2264\u2009c0,\u2009d0\u2009\u2264\u2009100). Each of the following m lines contains 4 integers. The i-th line contains numbers ai, bi, ci and di (1\u2009\u2264\u2009ai,\u2009bi,\u2009ci,\u2009di\u2009\u2264\u2009100).",
        "src_uid": "4e166b8b44427b1227e0f811161d3a6f",
        "bug_code_uid": "756338b91e0e722cbece333f7dff942a",
        "equal_cnt": 4,
        "prob_desc_time_limit": "2 seconds",
        "similarity_score": 0.9988584518432617,
        "bug_exec_outcome": "WRONG_ANSWER",
        "lang_cluster": "C#",
        "potential_dominant_fix_op": "replace",
        "prob_desc_sample_inputs": [
            "10 2 2 1\n7 3 2 100\n12 3 1 10",
            "100 1 25 50\n15 5 20 10"
        ],
        "prob_desc_input_from": "standard input",
        "prob_desc_description": "Lavrenty, a baker, is going to make several buns with stuffings and sell them.Lavrenty has n grams of dough as well as m different stuffing types. The stuffing types are numerated from 1 to m. Lavrenty knows that he has ai grams left of the i-th stuffing. It takes exactly bi grams of stuffing i and ci grams of dough to cook a bun with the i-th stuffing. Such bun can be sold for di tugriks.Also he can make buns without stuffings. Each of such buns requires c0 grams of dough and it can be sold for d0 tugriks. So Lavrenty can cook any number of buns with different stuffings or without it unless he runs out of dough and the stuffings. Lavrenty throws away all excess material left after baking.Find the maximum number of tugriks Lavrenty can earn.",
        "lang": "MS C#",
        "fix_exec_outcome": "",
        "insert_cnt": 0,
        "fix_source_code": "",
        "prob_desc_notes": "NoteTo get the maximum number of tugriks in the first sample, you need to cook 2 buns with stuffing 1, 4 buns with stuffing 2 and a bun without any stuffing.In the second sample Lavrenty should cook 4 buns without stuffings.",
        "file_name": "C#.jsonl",
        "tags": [
            "dp"
        ],
        "prob_desc_output_to": "standard output",
        "prob_desc_created_at": "1313766000",
        "prob_desc_memory_limit": "256 megabytes",
        "prob_desc_sample_outputs": [
            "241",
            "200"
        ],
        "hidden_unit_tests": "[{\"input\": \"10 2 2 1\\r\\n7 3 2 100\\r\\n12 3 1 10\\r\\n\", \"output\": [\"241\"]}, {\"input\": \"100 1 25 50\\r\\n15 5 20 10\\r\\n\", \"output\": [\"200\"]}, {\"input\": \"10 1 5 2\\r\\n100 1 2 3\\r\\n\", \"output\": [\"15\"]}, {\"input\": \"10 1 5 11\\r\\n3 1 3 8\\r\\n\", \"output\": [\"24\"]}, {\"input\": \"10 2 11 5\\r\\n100 1 3 10\\r\\n100 1 2 4\\r\\n\", \"output\": [\"30\"]}, {\"input\": \"5 8 6 5\\r\\n1 2 5 4\\r\\n1 2 6 7\\r\\n1 2 3 5\\r\\n1 2 1 6\\r\\n1 2 8 3\\r\\n1 2 2 4\\r\\n1 2 5 6\\r\\n1 2 7 7\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"300 4 100 2\\r\\n10 1 24 5\\r\\n10 1 25 6\\r\\n10 1 26 7\\r\\n10 1 27 8\\r\\n\", \"output\": [\"87\"]}, {\"input\": \"1 1 1 1\\r\\n1 1 1 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"2 1 2 1\\r\\n1 2 1 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"10 2 13 100\\r\\n20 1 3 10\\r\\n20 1 2 6\\r\\n\", \"output\": [\"32\"]}, {\"input\": \"100 5 8 80\\r\\n25 8 2 70\\r\\n27 6 7 30\\r\\n26 1 6 5\\r\\n7 1 1 86\\r\\n18 8 4 54\\r\\n\", \"output\": [\"1670\"]}, {\"input\": \"150 8 3 46\\r\\n39 4 10 25\\r\\n31 17 8 70\\r\\n37 2 13 1\\r\\n29 17 17 59\\r\\n54 20 5 39\\r\\n53 14 10 23\\r\\n50 12 16 41\\r\\n8 2 6 61\\r\\n\", \"output\": [\"2300\"]}, {\"input\": \"231 10 9 30\\r\\n98 11 5 17\\r\\n59 13 1 47\\r\\n83 1 7 2\\r\\n42 21 1 6\\r\\n50 16 2 9\\r\\n44 10 5 31\\r\\n12 20 8 9\\r\\n61 23 7 2\\r\\n85 18 2 19\\r\\n82 25 10 20\\r\\n\", \"output\": [\"1065\"]}, {\"input\": \"345 10 5 45\\r\\n1 23 14 55\\r\\n51 26 15 11\\r\\n65 4 16 36\\r\\n81 14 13 25\\r\\n8 9 13 60\\r\\n43 4 7 59\\r\\n85 11 14 35\\r\\n82 13 5 49\\r\\n85 28 15 3\\r\\n51 21 18 53\\r\\n\", \"output\": [\"3129\"]}, {\"input\": \"401 10 2 82\\r\\n17 9 14 48\\r\\n79 4 3 38\\r\\n1 2 6 31\\r\\n45 2 9 60\\r\\n45 2 4 50\\r\\n6 1 3 36\\r\\n3 1 19 37\\r\\n78 3 8 33\\r\\n59 8 19 19\\r\\n65 10 2 61\\r\\n\", \"output\": [\"16400\"]}, {\"input\": \"777 10 23 20\\r\\n50 90 86 69\\r\\n33 90 59 73\\r\\n79 26 35 31\\r\\n57 48 97 4\\r\\n5 10 48 87\\r\\n35 99 33 34\\r\\n7 32 54 35\\r\\n56 25 10 38\\r\\n5 3 89 76\\r\\n13 33 91 66\\r\\n\", \"output\": [\"734\"]}, {\"input\": \"990 10 7 20\\r\\n38 82 14 69\\r\\n5 66 51 5\\r\\n11 26 91 11\\r\\n29 12 73 96\\r\\n93 82 48 59\\r\\n19 15 5 50\\r\\n15 36 6 63\\r\\n16 57 94 90\\r\\n45 3 57 72\\r\\n61 41 47 18\\r\\n\", \"output\": [\"2850\"]}, {\"input\": \"1000 10 51 56\\r\\n2 62 82 65\\r\\n37 90 87 97\\r\\n11 94 47 95\\r\\n49 24 97 24\\r\\n33 38 40 31\\r\\n27 15 17 66\\r\\n91 80 34 71\\r\\n60 93 42 94\\r\\n9 35 73 68\\r\\n93 65 83 58\\r\\n\", \"output\": [\"1145\"]}, {\"input\": \"1000 10 1 53\\r\\n63 1 1 58\\r\\n58 1 2 28\\r\\n100 1 1 25\\r\\n61 1 1 90\\r\\n96 2 2 50\\r\\n19 2 1 90\\r\\n7 2 1 30\\r\\n90 1 2 5\\r\\n34 2 1 12\\r\\n3 2 1 96\\r\\n\", \"output\": [\"55948\"]}, {\"input\": \"1000 10 1 65\\r\\n77 1 1 36\\r\\n74 1 1 41\\r\\n96 1 1 38\\r\\n48 1 1 35\\r\\n1 1 1 54\\r\\n42 1 1 67\\r\\n26 1 1 23\\r\\n43 1 1 89\\r\\n82 1 1 7\\r\\n45 1 1 63\\r\\n\", \"output\": [\"66116\"]}, {\"input\": \"1000 10 1 87\\r\\n100 1 1 38\\r\\n100 1 1 45\\r\\n100 1 1 73\\r\\n100 1 1 89\\r\\n100 1 1 38\\r\\n100 1 1 13\\r\\n100 1 1 93\\r\\n100 1 1 89\\r\\n100 1 1 71\\r\\n100 1 1 29\\r\\n\", \"output\": [\"88000\"]}, {\"input\": \"1000 10 1 7\\r\\n100 1 1 89\\r\\n100 1 1 38\\r\\n100 1 1 13\\r\\n100 1 1 93\\r\\n100 1 1 89\\r\\n100 1 1 38\\r\\n100 1 1 45\\r\\n100 1 1 73\\r\\n100 1 1 71\\r\\n100 1 1 29\\r\\n\", \"output\": [\"57800\"]}, {\"input\": \"1000 10 1 100\\r\\n100 1 1 100\\r\\n100 1 1 100\\r\\n100 1 1 100\\r\\n100 1 1 100\\r\\n100 1 1 100\\r\\n100 1 1 100\\r\\n100 1 1 100\\r\\n100 1 1 100\\r\\n100 1 1 100\\r\\n100 1 1 100\\r\\n\", \"output\": [\"100000\"]}, {\"input\": \"99 10 100 100\\r\\n100 1 100 100\\r\\n100 1 100 100\\r\\n100 1 100 100\\r\\n100 1 100 100\\r\\n100 1 100 100\\r\\n100 1 100 100\\r\\n100 1 100 100\\r\\n100 1 100 100\\r\\n100 1 100 100\\r\\n100 1 100 100\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1000 10 100 75\\r\\n100 97 100 95\\r\\n100 64 100 78\\r\\n100 82 100 35\\r\\n100 51 100 64\\r\\n100 67 100 25\\r\\n100 79 100 33\\r\\n100 65 100 85\\r\\n100 99 100 78\\r\\n100 53 100 74\\r\\n100 87 100 73\\r\\n\", \"output\": [\"786\"]}, {\"input\": \"999 10 5 100\\r\\n100 1 10 100\\r\\n100 1 10 100\\r\\n100 1 10 100\\r\\n100 1 10 100\\r\\n100 1 10 100\\r\\n100 1 10 100\\r\\n100 1 10 100\\r\\n100 1 10 100\\r\\n100 1 10 100\\r\\n100 1 10 100\\r\\n\", \"output\": [\"19900\"]}, {\"input\": \"1000 10 50 100\\r\\n7 1 80 100\\r\\n5 1 37 100\\r\\n9 1 25 100\\r\\n7 1 17 100\\r\\n6 1 10 100\\r\\n5 1 15 100\\r\\n6 1 13 100\\r\\n2 1 14 100\\r\\n4 1 17 100\\r\\n3 1 32 100\\r\\n\", \"output\": [\"4800\"]}, {\"input\": \"1000 10 1 1\\r\\n1 2 1 97\\r\\n1 2 1 95\\r\\n1 2 1 99\\r\\n1 2 1 98\\r\\n1 2 1 93\\r\\n1 2 1 91\\r\\n1 2 1 90\\r\\n1 2 1 94\\r\\n1 2 1 92\\r\\n1 2 1 99\\r\\n\", \"output\": [\"1000\"]}, {\"input\": \"1 10 1 97\\r\\n1 1 1 98\\r\\n1 1 1 99\\r\\n1 1 1 76\\r\\n1 1 1 89\\r\\n1 1 1 64\\r\\n1 1 1 83\\r\\n1 1 1 72\\r\\n1 1 1 66\\r\\n1 1 1 54\\r\\n1 1 1 73\\r\\n\", \"output\": [\"99\"]}, {\"input\": \"3 10 10 98\\r\\n10 5 5 97\\r\\n6 7 1 56\\r\\n23 10 5 78\\r\\n40 36 4 35\\r\\n30 50 1 30\\r\\n60 56 8 35\\r\\n70 90 2 17\\r\\n10 11 3 68\\r\\n1 2 17 70\\r\\n13 4 8 19\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"1000 1 23 76\\r\\n74 22 14 5\\r\\n\", \"output\": [\"3268\"]}, {\"input\": \"1000 2 95 56\\r\\n58 54 66 61\\r\\n61 14 67 65\\r\\n\", \"output\": [\"713\"]}, {\"input\": \"1000 3 67 88\\r\\n90 86 66 17\\r\\n97 38 63 17\\r\\n55 78 39 51\\r\\n\", \"output\": [\"1232\"]}, {\"input\": \"1000 4 91 20\\r\\n74 18 18 73\\r\\n33 10 59 21\\r\\n7 42 87 79\\r\\n9 100 77 100\\r\\n\", \"output\": [\"515\"]}, {\"input\": \"1000 5 63 52\\r\\n6 98 18 77\\r\\n17 34 3 73\\r\\n59 6 35 7\\r\\n61 16 85 64\\r\\n73 62 40 11\\r\\n\", \"output\": [\"804\"]}, {\"input\": \"1000 6 87 32\\r\\n90 30 70 33\\r\\n53 6 99 77\\r\\n59 22 83 35\\r\\n65 32 93 28\\r\\n85 50 60 7\\r\\n15 15 5 82\\r\\n\", \"output\": [\"771\"]}, {\"input\": \"1000 7 59 64\\r\\n22 62 70 89\\r\\n37 78 43 29\\r\\n11 86 83 63\\r\\n17 48 1 92\\r\\n97 38 80 55\\r\\n15 3 89 42\\r\\n87 80 62 35\\r\\n\", \"output\": [\"1024\"]}, {\"input\": \"1000 8 31 96\\r\\n6 94 70 93\\r\\n73 2 39 33\\r\\n63 50 31 91\\r\\n21 64 9 56\\r\\n61 26 100 51\\r\\n67 39 21 50\\r\\n79 4 2 71\\r\\n100 9 18 86\\r\\n\", \"output\": [\"4609\"]}, {\"input\": \"1000 9 55 28\\r\\n38 74 22 49\\r\\n9 74 83 85\\r\\n63 66 79 19\\r\\n25 32 17 20\\r\\n73 62 20 47\\r\\n19 27 53 58\\r\\n71 80 94 7\\r\\n56 69 62 98\\r\\n49 7 65 76\\r\\n\", \"output\": [\"831\"]}, {\"input\": \"1000 10 67 55\\r\\n10 21 31 19\\r\\n95 29 53 1\\r\\n55 53 19 18\\r\\n26 88 19 94\\r\\n31 1 45 50\\r\\n70 38 33 93\\r\\n2 12 7 95\\r\\n54 37 81 31\\r\\n65 32 63 16\\r\\n93 66 98 38\\r\\n\", \"output\": [\"1161\"]}, {\"input\": \"1000 10 37 38\\r\\n65 27 78 14\\r\\n16 70 78 66\\r\\n93 86 91 43\\r\\n95 6 72 86\\r\\n72 59 94 36\\r\\n66 58 96 40\\r\\n41 72 64 4\\r\\n26 47 69 13\\r\\n85 2 52 15\\r\\n34 62 16 79\\r\\n\", \"output\": [\"1156\"]}, {\"input\": \"1000 10 58 21\\r\\n73 85 73 10\\r\\n38 60 55 31\\r\\n32 66 62 16\\r\\n63 76 73 78\\r\\n61 17 92 70\\r\\n61 79 11 87\\r\\n27 31 21 62\\r\\n47 9 4 94\\r\\n4 71 42 61\\r\\n76 5 35 72\\r\\n\", \"output\": [\"1823\"]}, {\"input\": \"12 2 100 1\\r\\n100 1 9 10\\r\\n100 1 4 4\\r\\n\", \"output\": [\"12\"]}, {\"input\": \"1 1 1 10\\r\\n100 100 1 100\\r\\n\", \"output\": [\"100\"]}, {\"input\": \"10 3 5 1\\r\\n100 1 3 7\\r\\n100 1 2 5\\r\\n1 1 1 10\\r\\n\", \"output\": [\"32\"]}, {\"input\": \"10 3 5 1\\r\\n100 1 3 7\\r\\n100 1 2 5\\r\\n1 1 1 10\\r\\n\", \"output\": [\"32\"]}, {\"input\": \"1000 10 1 1\\r\\n100 1 1 1\\r\\n100 1 1 1\\r\\n100 1 1 1\\r\\n100 1 1 1\\r\\n100 1 1 1\\r\\n100 1 1 1\\r\\n100 1 1 1\\r\\n100 1 1 1\\r\\n100 1 1 1\\r\\n100 1 1 1\\r\\n\", \"output\": [\"1000\"]}, {\"input\": \"10 2 100 1\\r\\n4 4 5 7\\r\\n6 2 3 4\\r\\n\", \"output\": [\"12\"]}, {\"input\": \"8 2 10 10\\r\\n5 5 5 15\\r\\n50 5 4 8\\r\\n\", \"output\": [\"16\"]}, {\"input\": \"8 2 10 10\\r\\n5 5 5 15\\r\\n50 5 4 8\\r\\n\", \"output\": [\"16\"]}, {\"input\": \"4 1 2 4\\r\\n10 1 3 7\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"4 1 2 4\\r\\n10 1 3 7\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"10 2 5 1\\r\\n100 1 2 5\\r\\n100 1 3 8\\r\\n\", \"output\": [\"26\"]}, {\"input\": \"1000 10 10 10\\r\\n100 1 1 1\\r\\n100 1 1 2\\r\\n100 1 2 1\\r\\n100 1 2 2\\r\\n100 1 1 1\\r\\n100 1 2 3\\r\\n100 1 3 2\\r\\n100 1 3 3\\r\\n100 1 1 3\\r\\n100 1 3 1\\r\\n\", \"output\": [\"1400\"]}, {\"input\": \"10 3 5 1\\r\\n100 1 3 7\\r\\n100 1 2 5\\r\\n1 1 1 10\\r\\n\", \"output\": [\"32\"]}]"
    }
}