{
    "oai_response": null,
    "source_data": {
        "delete_cnt": 2,
        "fix_code_uid": "",
        "difficulty": 1700,
        "replace_cnt": 3,
        "fix_ops_cnt": 12,
        "prob_desc_output_spec": "Output one integer which denotes the maximum number of dominoes which Anadi can place on the edges of the graph.",
        "apr_id": "6f2b3171301dc420844007c2a9810367",
        "bug_source_code": "\ufeff//\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff#define EXTENDSTACKSIZE\n \n\ufeffusing System;\n using System.Collections.Generic;\n using System.Globalization;\nusing System.IO;\nusing System.Linq;\n using System.Text;\n using System.Threading;\n \n         namespace CF\n{\n    internal class Program\n    {\n        private const int stackSize = 64 * 1024 * 1024;\n        \n        private static void Run()\n        {\n            using (var sr = new InputReader(Console.In))\n//            using (var sr = new InputReader(new StreamReader(\"input.txt\")))\n            using (var sw = Console.Out)\n//            using (var sw = new StreamWriter(\"output.txt\"))\n            using (var task = new Task(sr, sw)) {\n                task.Solve();\n//                Console.ReadKey();\n            }\n        }\n        \n        private static void Main(string[] args)\n        {\n#if EXTENDSTACKSIZE\n            var threadStart = new ThreadStart(Run);\n            var thread = new Thread(threadStart, stackSize);\n            thread.Start();\n            thread.Join();\n#else\n            Run();\n#endif\n        }\n    }\n    \n    internal class Task : IDisposable\n    {\n        private readonly InputReader sr;\n        private readonly TextWriter sw;\n        private bool isDispose;\n\n        private Graph graph;\n\n        private int answ;\n        \n        public Task(InputReader sr, TextWriter sw)\n        {\n            this.sr = sr;\n            this.sw = sw;\n        }\n        \n        public void Solve()\n        {\n            var n = sr.NextInt32();\n            var m = sr.NextInt32();\n            graph = new Graph(n);\n            for (var i = 0; i < m; i++)\n            {\n                graph.Insert(sr.NextInt32() - 1, sr.NextInt32() - 1);\n            }\n            Solution(-1, new int[n]);\n\n            sw.WriteLine(answ);\n        }\n\n        private void Solution(int k, int[] values)\n        {\n            if (k + 1 == values.Length)\n            {\n                var curr = graph.Answer(values);\n//                var curr = 0;\n                answ = Math.Max(curr, answ);\n            }\n            else\n            {\n                k++;\n                var candidates = GetCandidates(k, values);\n                for (var i = 0; i < candidates.Count; i++)\n                {\n                    values[k] = candidates[i];\n                    Solution(k, values);\n                }\n            }\n        }\n\n        private List<int> GetCandidates(int k, int[] values)\n        {\n            var inSol = new bool[values.Length];\n            for (var i = 0; i < k; i++)\n            {\n                inSol[values[i]] = true;\n            }\n\n            var candidates = new List<int>();\n            for (var i = 0; i < values.Length; i++)\n            {\n                if (!inSol[i])\n                {\n                    candidates.Add(i);\n                }\n            }\n\n            return candidates;\n        }\n\n        public void Dispose()\n        {\n            Dispose(true);\n            GC.SuppressFinalize(this);\n        }\n        \n        private void Dispose(bool disposing)\n        {\n            if (!isDispose) {\n                if (disposing) {\n                    if(sr != null)\n                        sr.Dispose();\n                    \n                    if(sw != null)\n                        sw.Dispose();\n                }\n \n                isDispose = true;\n            }\n        }\n    }\n}\n\nclass Graph\n{\n    private readonly List<int>[] edges;\n    private int[] values;\n    private bool[,] pool = new bool[7, 7];\n\n    public Graph(int n)\n    {\n        edges = new List<int>[n];\n    }\n\n    public int Answer(int[] values)\n    {\n        this.values = values;\n        for (var i = 0; i < 6; i++)\n        {\n            for (var j = i; j < 6; j++)\n            {\n                pool[i, j] = true;\n            }\n        }\n\n        var visited = new bool[edges.Length];\n        DfsVisit(0, -1, visited);\n        var answ = 0;\n        for (var i = 0; i < 6; i++)\n        {\n            for (var j = i; j < 6; j++)\n            {\n                if (!pool[i, j])\n                {\n                    answ++;\n                }\n            }\n        }\n\n        if (edges.Length == 7)\n        {\n            var lastVert = 0;\n            for (var i = 0; i < edges.Length; i++)\n            {\n                if (values[i] == 6)\n                {\n                    lastVert = i;\n                    break;\n                }\n            }\n\n            if (edges[lastVert] != null && edges[lastVert].Count > 0)\n            {\n                answ++;\n            }\n        }\n\n        return answ;\n    }\n\n    private void DfsVisit(int v, int parent, bool[] visited)\n    {\n        visited[v] = true;\n        if (edges[v] != null)\n        {\n            for (var i = 0; i < edges[v].Count; i++)\n            {\n                if (parent != edges[v][i])\n                {\n                    var value = values[v];\n                    var uValue = values[edges[v][i]];\n                    if (pool[value, uValue])\n                    {\n                        pool[value, uValue] = false;\n                    }\n                    else\n                    {\n                        if (pool[uValue, value])\n                        {\n                            pool[uValue, value] = false;\n                        }\n                    }\n\n                    if (!visited[edges[v][i]])\n                    {\n                        DfsVisit(edges[v][i], v, visited);\n                    }\n                }\n            }\n        }\n    }\n\n    public void Insert(int x, int y)\n    {\n        if (edges[x] == null)\n        {\n            edges[x] = new List<int>();\n        }\n\n        edges[x].Add(y);\n        if (edges[y] == null)\n        {\n            edges[y] = new List<int>();\n        }\n\n        edges[y].Add(x);\n    }\n}\n \ninternal class InputReader : IDisposable\n{\n    private bool isDispose;\n    private readonly TextReader sr;\n    private string[] buffer;\n    private int seek;\n \n    public InputReader(TextReader stream)\n    {\n        sr = stream;\n    }\n \n    public void Dispose()\n    {\n        Dispose(true);\n        GC.SuppressFinalize(this);\n    }\n \n    public string NextString()\n    {\n        var result = sr.ReadLine();\n        return result;\n    }\n \n    public int NextInt32()\n    {\n        return Int32.Parse(ReadNextToken());\n    }\n \n    private string ReadNextToken()\n    {\n        if (buffer == null || seek == buffer.Length) {\n            seek = 0;\n            buffer = NextSplitStrings();\n        }\n \n        return buffer[seek++];\n    }\n \n    public long NextInt64()\n    {\n        return Int64.Parse(ReadNextToken());\n    }\n    \n    public int[] ReadArrayOfInt32()\n    {\n        return ReadArray(Int32.Parse);\n    }\n \n    public long[] ReadArrayOfInt64()\n    {\n        return ReadArray(Int64.Parse);\n    }\n \n    public string[] NextSplitStrings()\n    {\n        return NextString()\n            .Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);\n    }\n \n    public T[] ReadArray<T>(Func<string, CultureInfo, T> func)\n    {\n        return NextSplitStrings()\n            .Select(s => func(s, CultureInfo.InvariantCulture))\n            .ToArray();\n    }\n \n    public T[] ReadArrayFromString<T>(Func<string, CultureInfo, T> func, string str)\n    {\n        return\n            str.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries)\n                .Select(s => func(s, CultureInfo.InvariantCulture))\n                .ToArray();\n    }\n \n    protected void Dispose(bool dispose)\n    {\n        if (!isDispose)\n        {\n            if (dispose)\n                sr.Close();\n            \n            isDispose = true;\n        }\n    }\n \n    ~InputReader()\n    {\n        Dispose(false);\n    }\n}\n",
        "prob_desc_input_spec": "The first line contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\leq n \\leq 7$$$, $$$0 \\leq m \\leq \\frac{n\\cdot(n-1)}{2}$$$) \u2014 the number of vertices and the number of edges in the graph. The next $$$m$$$ lines contain two integers each. Integers in the $$$i$$$-th line are $$$a_i$$$ and $$$b_i$$$ ($$$1 \\leq a, b \\leq n$$$, $$$a \\neq b$$$) and denote that there is an edge which connects vertices $$$a_i$$$ and $$$b_i$$$. The graph might be disconnected. It's however guaranteed that the graph doesn't contain any self-loops, and that there is at most one edge between any pair of vertices.",
        "src_uid": "11e6559cfb71b8f6ca88242094b17a2b",
        "bug_code_uid": "ba43c2c21ed08c343f6de53ad866b84a",
        "equal_cnt": 13,
        "prob_desc_time_limit": "2 seconds",
        "similarity_score": 0.9137591123580933,
        "bug_exec_outcome": "WRONG_ANSWER",
        "lang_cluster": "C#",
        "potential_dominant_fix_op": "insert",
        "prob_desc_sample_inputs": [
            "4 4\n1 2\n2 3\n3 4\n4 1",
            "7 0",
            "3 1\n1 3",
            "7 21\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n2 3\n2 4\n2 5\n2 6\n2 7\n3 4\n3 5\n3 6\n3 7\n4 5\n4 6\n4 7\n5 6\n5 7\n6 7"
        ],
        "prob_desc_input_from": "standard input",
        "prob_desc_description": "Anadi has a set of dominoes. Every domino has two parts, and each part contains some dots. For every $$$a$$$ and $$$b$$$ such that $$$1 \\leq a \\leq b \\leq 6$$$, there is exactly one domino with $$$a$$$ dots on one half and $$$b$$$ dots on the other half. The set contains exactly $$$21$$$ dominoes. Here is an exact illustration of his set:  Also, Anadi has an undirected graph without self-loops and multiple edges. He wants to choose some dominoes and place them on the edges of this graph. He can use at most one domino of each type. Each edge can fit at most one domino. It's not necessary to place a domino on each edge of the graph.When placing a domino on an edge, he also chooses its direction. In other words, one half of any placed domino must be directed toward one of the endpoints of the edge and the other half must be directed toward the other endpoint. There's a catch: if there are multiple halves of dominoes directed toward the same vertex, each of these halves must contain the same number of dots.How many dominoes at most can Anadi place on the edges of his graph?",
        "lang": "Mono C#",
        "fix_exec_outcome": "",
        "insert_cnt": 7,
        "fix_source_code": "",
        "prob_desc_notes": "NoteHere is an illustration of Anadi's graph from the first sample test:  And here is one of the ways to place a domino on each of its edges:  Note that each vertex is faced by the halves of dominoes with the same number of dots. For instance, all halves directed toward vertex $$$1$$$ have three dots.",
        "file_name": "C#.jsonl",
        "tags": [
            "graphs",
            "brute force"
        ],
        "prob_desc_output_to": "standard output",
        "prob_desc_created_at": "1569143100",
        "prob_desc_memory_limit": "256 megabytes",
        "prob_desc_sample_outputs": [
            "4",
            "0",
            "1",
            "16"
        ],
        "hidden_unit_tests": "[{\"input\": \"4 4\\r\\n1 2\\r\\n2 3\\r\\n3 4\\r\\n4 1\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"7 0\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"3 1\\r\\n1 3\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"7 21\\r\\n1 2\\r\\n1 3\\r\\n1 4\\r\\n1 5\\r\\n1 6\\r\\n1 7\\r\\n2 3\\r\\n2 4\\r\\n2 5\\r\\n2 6\\r\\n2 7\\r\\n3 4\\r\\n3 5\\r\\n3 6\\r\\n3 7\\r\\n4 5\\r\\n4 6\\r\\n4 7\\r\\n5 6\\r\\n5 7\\r\\n6 7\\r\\n\", \"output\": [\"16\"]}, {\"input\": \"4 4\\r\\n4 2\\r\\n2 3\\r\\n3 4\\r\\n2 1\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"5 7\\r\\n4 3\\r\\n3 2\\r\\n1 4\\r\\n5 3\\r\\n5 2\\r\\n4 5\\r\\n1 5\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"6 9\\r\\n2 5\\r\\n3 6\\r\\n1 2\\r\\n1 4\\r\\n2 6\\r\\n6 1\\r\\n3 4\\r\\n1 3\\r\\n5 3\\r\\n\", \"output\": [\"9\"]}, {\"input\": \"7 5\\r\\n5 6\\r\\n3 7\\r\\n7 2\\r\\n4 2\\r\\n1 4\\r\\n\", \"output\": [\"5\"]}, {\"input\": \"7 14\\r\\n7 3\\r\\n2 4\\r\\n2 1\\r\\n2 5\\r\\n5 3\\r\\n6 7\\r\\n4 7\\r\\n5 4\\r\\n7 5\\r\\n4 3\\r\\n4 1\\r\\n6 1\\r\\n6 3\\r\\n3 1\\r\\n\", \"output\": [\"13\"]}, {\"input\": \"7 15\\r\\n4 6\\r\\n7 3\\r\\n3 1\\r\\n6 5\\r\\n2 7\\r\\n3 6\\r\\n7 6\\r\\n2 6\\r\\n7 5\\r\\n3 5\\r\\n5 4\\r\\n4 7\\r\\n2 1\\r\\n2 4\\r\\n2 3\\r\\n\", \"output\": [\"14\"]}, {\"input\": \"7 18\\r\\n1 5\\r\\n5 7\\r\\n1 3\\r\\n1 6\\r\\n4 5\\r\\n3 7\\r\\n6 7\\r\\n4 7\\r\\n2 7\\r\\n1 2\\r\\n7 1\\r\\n5 6\\r\\n6 2\\r\\n4 2\\r\\n5 3\\r\\n3 6\\r\\n4 6\\r\\n4 3\\r\\n\", \"output\": [\"16\"]}, {\"input\": \"7 14\\r\\n2 7\\r\\n5 7\\r\\n3 4\\r\\n4 2\\r\\n2 3\\r\\n4 1\\r\\n6 5\\r\\n4 7\\r\\n6 2\\r\\n6 1\\r\\n5 3\\r\\n5 1\\r\\n7 6\\r\\n3 1\\r\\n\", \"output\": [\"13\"]}, {\"input\": \"7 11\\r\\n4 7\\r\\n6 4\\r\\n5 1\\r\\n1 4\\r\\n5 4\\r\\n1 2\\r\\n3 4\\r\\n4 2\\r\\n6 1\\r\\n3 1\\r\\n7 1\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"7 18\\r\\n3 2\\r\\n5 3\\r\\n6 7\\r\\n7 3\\r\\n5 4\\r\\n4 6\\r\\n2 4\\r\\n7 1\\r\\n5 6\\r\\n5 2\\r\\n5 1\\r\\n3 4\\r\\n7 4\\r\\n6 1\\r\\n3 6\\r\\n7 2\\r\\n1 3\\r\\n1 2\\r\\n\", \"output\": [\"15\"]}, {\"input\": \"7 17\\r\\n1 7\\r\\n5 6\\r\\n6 3\\r\\n1 2\\r\\n1 6\\r\\n3 4\\r\\n6 7\\r\\n4 5\\r\\n1 3\\r\\n1 5\\r\\n4 1\\r\\n5 2\\r\\n3 5\\r\\n4 6\\r\\n7 5\\r\\n7 2\\r\\n6 2\\r\\n\", \"output\": [\"14\"]}, {\"input\": \"7 10\\r\\n3 6\\r\\n6 1\\r\\n4 6\\r\\n1 7\\r\\n7 4\\r\\n5 3\\r\\n5 6\\r\\n6 7\\r\\n7 5\\r\\n5 1\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"1 0\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"2 0\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"2 1\\r\\n2 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"3 0\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"3 2\\r\\n2 3\\r\\n1 3\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"3 3\\r\\n1 2\\r\\n2 3\\r\\n1 3\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"4 0\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"4 2\\r\\n2 4\\r\\n1 3\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"4 6\\r\\n2 1\\r\\n1 4\\r\\n2 4\\r\\n3 1\\r\\n3 2\\r\\n3 4\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"5 0\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"5 3\\r\\n5 1\\r\\n1 4\\r\\n5 4\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"5 10\\r\\n1 2\\r\\n3 4\\r\\n1 3\\r\\n2 3\\r\\n5 4\\r\\n5 1\\r\\n4 1\\r\\n5 3\\r\\n5 2\\r\\n2 4\\r\\n\", \"output\": [\"10\"]}, {\"input\": \"6 0\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"6 3\\r\\n4 2\\r\\n5 4\\r\\n4 3\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"6 6\\r\\n4 3\\r\\n4 6\\r\\n1 2\\r\\n4 5\\r\\n6 3\\r\\n3 2\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"6 15\\r\\n4 3\\r\\n2 1\\r\\n3 6\\r\\n1 3\\r\\n4 1\\r\\n2 3\\r\\n3 5\\r\\n4 5\\r\\n6 1\\r\\n2 5\\r\\n1 5\\r\\n2 6\\r\\n6 4\\r\\n5 6\\r\\n4 2\\r\\n\", \"output\": [\"15\"]}, {\"input\": \"6 12\\r\\n2 1\\r\\n4 3\\r\\n1 5\\r\\n6 4\\r\\n6 2\\r\\n3 6\\r\\n1 6\\r\\n2 4\\r\\n1 4\\r\\n2 5\\r\\n5 4\\r\\n1 3\\r\\n\", \"output\": [\"12\"]}, {\"input\": \"7 1\\r\\n5 3\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"7 2\\r\\n5 1\\r\\n3 5\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"7 3\\r\\n1 5\\r\\n5 7\\r\\n2 7\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"7 4\\r\\n3 7\\r\\n7 5\\r\\n1 3\\r\\n1 6\\r\\n\", \"output\": [\"4\"]}, {\"input\": \"7 6\\r\\n3 5\\r\\n7 1\\r\\n3 7\\r\\n5 4\\r\\n7 4\\r\\n3 6\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"7 7\\r\\n2 5\\r\\n6 1\\r\\n5 4\\r\\n7 2\\r\\n3 2\\r\\n4 1\\r\\n7 3\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"7 8\\r\\n4 1\\r\\n5 7\\r\\n6 4\\r\\n7 1\\r\\n6 3\\r\\n3 4\\r\\n3 1\\r\\n6 7\\r\\n\", \"output\": [\"8\"]}, {\"input\": \"7 9\\r\\n2 6\\r\\n7 4\\r\\n2 5\\r\\n2 7\\r\\n4 2\\r\\n3 5\\r\\n5 6\\r\\n6 7\\r\\n7 3\\r\\n\", \"output\": [\"9\"]}, {\"input\": \"7 11\\r\\n2 4\\r\\n1 3\\r\\n5 2\\r\\n2 7\\r\\n1 4\\r\\n4 3\\r\\n2 1\\r\\n7 6\\r\\n3 2\\r\\n7 4\\r\\n4 5\\r\\n\", \"output\": [\"11\"]}, {\"input\": \"7 12\\r\\n6 3\\r\\n3 5\\r\\n7 5\\r\\n1 5\\r\\n1 7\\r\\n7 6\\r\\n4 1\\r\\n2 1\\r\\n1 6\\r\\n5 6\\r\\n3 4\\r\\n4 2\\r\\n\", \"output\": [\"12\"]}, {\"input\": \"7 13\\r\\n6 5\\r\\n5 7\\r\\n4 2\\r\\n7 2\\r\\n4 1\\r\\n6 7\\r\\n4 3\\r\\n1 6\\r\\n2 5\\r\\n5 4\\r\\n2 1\\r\\n6 4\\r\\n6 2\\r\\n\", \"output\": [\"13\"]}, {\"input\": \"7 16\\r\\n3 5\\r\\n1 3\\r\\n3 7\\r\\n4 2\\r\\n1 4\\r\\n1 6\\r\\n7 6\\r\\n5 1\\r\\n7 2\\r\\n4 3\\r\\n3 6\\r\\n2 3\\r\\n2 5\\r\\n4 5\\r\\n2 6\\r\\n5 7\\r\\n\", \"output\": [\"15\"]}, {\"input\": \"7 17\\r\\n4 6\\r\\n1 7\\r\\n7 5\\r\\n3 7\\r\\n7 2\\r\\n2 5\\r\\n6 7\\r\\n1 3\\r\\n5 1\\r\\n6 2\\r\\n4 2\\r\\n3 2\\r\\n1 2\\r\\n5 3\\r\\n4 5\\r\\n3 4\\r\\n1 6\\r\\n\", \"output\": [\"16\"]}, {\"input\": \"7 19\\r\\n6 1\\r\\n6 4\\r\\n6 5\\r\\n1 7\\r\\n2 7\\r\\n3 5\\r\\n7 6\\r\\n2 4\\r\\n5 7\\r\\n3 4\\r\\n6 2\\r\\n4 1\\r\\n5 1\\r\\n4 7\\r\\n3 2\\r\\n4 5\\r\\n3 1\\r\\n2 5\\r\\n6 3\\r\\n\", \"output\": [\"16\"]}, {\"input\": \"7 20\\r\\n4 7\\r\\n1 4\\r\\n2 3\\r\\n4 3\\r\\n3 7\\r\\n7 5\\r\\n4 5\\r\\n1 2\\r\\n6 7\\r\\n3 1\\r\\n3 5\\r\\n1 5\\r\\n1 7\\r\\n2 6\\r\\n6 4\\r\\n5 2\\r\\n5 6\\r\\n6 3\\r\\n1 6\\r\\n2 7\\r\\n\", \"output\": [\"16\"]}, {\"input\": \"7 21\\r\\n3 5\\r\\n7 2\\r\\n2 3\\r\\n6 5\\r\\n5 2\\r\\n4 7\\r\\n2 6\\r\\n2 4\\r\\n6 7\\r\\n5 1\\r\\n1 4\\r\\n4 5\\r\\n5 7\\r\\n4 6\\r\\n3 1\\r\\n1 2\\r\\n3 4\\r\\n7 1\\r\\n3 7\\r\\n6 1\\r\\n3 6\\r\\n\", \"output\": [\"16\"]}, {\"input\": \"7 12\\r\\n3 4\\r\\n5 4\\r\\n1 7\\r\\n7 3\\r\\n2 5\\r\\n3 2\\r\\n1 4\\r\\n5 6\\r\\n6 1\\r\\n6 3\\r\\n2 1\\r\\n5 7\\r\\n\", \"output\": [\"12\"]}, {\"input\": \"7 7\\r\\n7 6\\r\\n4 2\\r\\n3 1\\r\\n4 7\\r\\n6 3\\r\\n2 5\\r\\n1 5\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"7 6\\r\\n7 5\\r\\n5 2\\r\\n1 5\\r\\n5 4\\r\\n3 5\\r\\n6 5\\r\\n\", \"output\": [\"6\"]}, {\"input\": \"7 15\\r\\n5 1\\r\\n3 2\\r\\n2 5\\r\\n3 5\\r\\n6 1\\r\\n4 3\\r\\n6 2\\r\\n4 5\\r\\n7 5\\r\\n3 6\\r\\n3 1\\r\\n7 3\\r\\n4 6\\r\\n6 5\\r\\n6 7\\r\\n\", \"output\": [\"13\"]}, {\"input\": \"7 18\\r\\n3 7\\r\\n3 2\\r\\n2 1\\r\\n1 7\\r\\n5 1\\r\\n3 4\\r\\n5 6\\r\\n4 2\\r\\n6 2\\r\\n1 4\\r\\n2 5\\r\\n6 3\\r\\n3 1\\r\\n6 7\\r\\n6 1\\r\\n7 2\\r\\n6 4\\r\\n3 5\\r\\n\", \"output\": [\"15\"]}, {\"input\": \"7 19\\r\\n1 2\\r\\n7 3\\r\\n3 4\\r\\n4 7\\r\\n3 6\\r\\n7 5\\r\\n6 2\\r\\n4 6\\r\\n6 7\\r\\n5 2\\r\\n3 2\\r\\n6 5\\r\\n4 1\\r\\n2 4\\r\\n4 5\\r\\n6 1\\r\\n3 1\\r\\n1 7\\r\\n5 1\\r\\n\", \"output\": [\"16\"]}, {\"input\": \"7 16\\r\\n3 2\\r\\n6 3\\r\\n6 1\\r\\n5 6\\r\\n7 5\\r\\n5 2\\r\\n6 2\\r\\n2 1\\r\\n5 4\\r\\n4 1\\r\\n7 2\\r\\n1 5\\r\\n2 4\\r\\n7 3\\r\\n1 7\\r\\n6 7\\r\\n\", \"output\": [\"15\"]}, {\"input\": \"7 12\\r\\n4 1\\r\\n6 4\\r\\n3 4\\r\\n3 1\\r\\n2 4\\r\\n7 5\\r\\n5 4\\r\\n2 1\\r\\n6 7\\r\\n2 3\\r\\n7 4\\r\\n6 5\\r\\n\", \"output\": [\"11\"]}]"
    }
}