{
    "oai_response": {
        "choices": [
            {
                "message": {
                    "role": "assistant",
                    "content": "```csharp\n\ufeffusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\n\nnamespace CP_CS\n{\n    class Task\n    {\n        static void Solve()\n        {\n            int n = ReadInt();\n            int a = (int)Math.Ceiling(Math.Sqrt(n));\n            int b = n / a;\n            while(a * b != n)\n            {\n                a++;\n                b = n / a;\n            }\n            Write($\"{a} {b}\");\n        }\n\n        #region -- Main -- \n\n        private static TextReader reader;\n        private static TextWriter writer;\n\n        static void Main()\n        {\n            reader = new StreamReader(Console.OpenStandardInput());\n            writer = new StreamWriter(Console.OpenStandardOutput());\n            try\n            {\n                Solve();\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(ex);\n#if DEBUG\n#else\n            throw;\n#endif\n            }\n            reader.Close();\n            writer.Close();\n        }\n\n        #endregion\n        #region -- Read / Write --\n\n        private static Queue<string> currentLineTokens = new Queue<string>();\n\n        private static string[] ReadAndSplitLine()\n        {\n            return reader.ReadLine().Split(new[] { ' ', '\\t' }, StringSplitOptions.RemoveEmptyEntries);\n        }\n\n        public static string ReadToken()\n        {\n            while (currentLineTokens.Count == 0) currentLineTokens = new Queue<string>(ReadAndSplitLine());\n            return currentLineTokens.Dequeue();\n        }\n\n        public static int ReadInt()\n        {\n            return int.Parse(ReadToken());\n        }\n\n        public static void WriteArray<T>(IEnumerable<T> array)\n        {\n            writer.WriteLine(string.Join(\" \", array));\n        }\n\n        public static void Write(params object[] array)\n        {\n            WriteArray(array);\n        }\n        #endregion\n    }\n}\n```"
                }
            }
        ],
        "prompt": [
            "Fix a buggy program written in C# language to solve the following programming problem:\nDescription: A big company decided to launch a new series of rectangular displays, and decided that the display must have exactly n pixels. Your task is to determine the size of the rectangular display \u2014 the number of lines (rows) of pixels a and the number of columns of pixels b, so that:  there are exactly n pixels on the display;  the number of rows does not exceed the number of columns, it means a\u2009\u2264\u2009b;  the difference b\u2009-\u2009a is as small as possible. \nInput Specification: The first line contains the positive integer n (1\u2009\u2264\u2009n\u2009\u2264\u2009106)\u00a0\u2014 the number of pixels display should have.\nOutput Specification: Print two integers\u00a0\u2014 the number of rows and columns on the display. \n\nSample Input:\n8\nSample Output:\n2 4\n\nSample Input:\n64\nSample Output:\n8 8\n\nSample Input:\n5\nSample Output:\n1 5\n\nSample Input:\n999999\nSample Output:\n999 1001\n\nNotes: NoteIn the first example the minimum possible difference equals 2, so on the display should be 2 rows of 4 pixels.In the second example the minimum possible difference equals 0, so on the display should be 8 rows of 8 pixels.In the third example the minimum possible difference equals 4, so on the display should be 1 row of 5 pixels.\nTake input from standard input and output to standard output\n\nHere is the code with a bug of WRONG_ANSWER:\n\n\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Globalization;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\nusing System.Text.RegularExpressions;\n\nnamespace CP_CS\n{\n\n    class Task\n    {\n\n        static void Solve()\n        {\n            int n = ReadInt();\n            for (int i = (int)Math.Ceiling(Math.Sqrt(n)); i >= 1; i--)\n            {\n                if (n % i == 0)\n                {\n                    Write($\"{i} {n/i}\");\n                    return;\n                    ;\n                }   \n            }\n        }\n\n        static string[] Split(string str, int chunkSize)\n        {\n            return Enumerable.Range(0, str.Length / chunkSize)\n                .Select(i => str.Substring(i * chunkSize, chunkSize)).ToArray();\n        }\n\n        #region -- Main -- \n\n        private static TextReader reader;\n        private static TextWriter writer;\n\n        static void Main()\n        {\n#if DEBUG\n            //reader = new StreamReader(\"..\\\\..\\\\input.txt\");\n            reader = new StreamReader(Console.OpenStandardInput());\n            writer = Console.Out;\n            //writer = new StreamWriter(\"..\\\\..\\\\output.txt\");\n#else\n        reader = new StreamReader(Console.OpenStandardInput());\n        writer = new StreamWriter(Console.OpenStandardOutput());\n        //reader = new StreamReader(\"pluses.in\");\n        //writer = new StreamWriter(\"pluses.out\");\n#endif\n            try\n            {\n                //var thread = new Thread(new Solver().Solve, 1024 * 1024 * 128);\n                //thread.Start();\n                //thread.Join();\n                Solve();\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(ex);\n#if DEBUG\n#else\n            throw;\n#endif\n            }\n            reader.Close();\n            writer.Close();\n        }\n\n        #endregion\n        #region -- Read / Write --\n\n        private static Queue<string> currentLineTokens = new Queue<string>();\n\n        private static string[] ReadAndSplitLine()\n        {\n            return reader.ReadLine().Split(new[] { ' ', '\\t' }, StringSplitOptions.RemoveEmptyEntries);\n        }\n\n        private static string[] ReadAndSplitLine(char divisor)\n        {\n            return reader.ReadLine().Split(new[] { divisor }, StringSplitOptions.RemoveEmptyEntries);\n        }\n\n        public static string ReadToken()\n        {\n            while (currentLineTokens.Count == 0) currentLineTokens = new Queue<string>(ReadAndSplitLine());\n            return currentLineTokens.Dequeue();\n        }\n\n        public static int ReadInt()\n        {\n            return int.Parse(ReadToken());\n        }\n\n        public static long ReadLong()\n        {\n            return long.Parse(ReadToken());\n        }\n\n        //public static BigInteger ReadBigInteger()\n        //{\n        //    return BigInteger.Parse(ReadToken());\n        //}\n\n        public static double ReadDouble()\n        {\n            return double.Parse(ReadToken(), CultureInfo.InvariantCulture);\n        }\n\n        public static int[] ReadIntArray()\n        {\n            return ReadAndSplitLine().Select(int.Parse).ToArray();\n        }\n\n        public static bool[] ReadBoolArray()\n        {\n            return ReadAndSplitLine().ToString().ToCharArray().Select(chr => chr == '1').ToArray();\n        }\n\n        public static long[] ReadLongArray()\n        {\n            return ReadAndSplitLine().Select(long.Parse).ToArray();\n        }\n\n        public static double[] ReadDoubleArray()\n        {\n            return ReadAndSplitLine().Select(s => double.Parse(s, CultureInfo.InvariantCulture)).ToArray();\n        }\n\n        public static int[][] ReadIntMatrix(int numberOfRows)\n        {\n            int[][] matrix = new int[numberOfRows][];\n            for (int i = 0; i < numberOfRows; i++) matrix[i] = ReadIntArray();\n            return matrix;\n        }\n\n        public static bool[][] ReadBoolMatrix(int numberOfRows)\n        {\n            bool[][] matrix = new bool[numberOfRows][];\n            for (int i = 0; i < numberOfRows; i++)\n                matrix[i] = ReadBoolArray();\n            return matrix;\n        }\n\n        public static bool[][] TransposeBoolMatrix(bool[][] array, int numberOfRows)\n        {\n            bool[][] matrix = array;\n            bool[][] ret = new bool[matrix[0].Length][];\n            for (int i = 0; i < ret.Length; i++)\n            {\n                ret[i] = new bool[numberOfRows];\n                for (int j = 0; j < numberOfRows; j++) ret[i][j] = matrix[j][i];\n            }\n            return ret;\n        }\n\n\n        public static int[][] ReadAndTransposeIntMatrix(int numberOfRows)\n        {\n            int[][] matrix = ReadIntMatrix(numberOfRows);\n            int[][] ret = new int[matrix[0].Length][];\n            for (int i = 0; i < ret.Length; i++)\n            {\n                ret[i] = new int[numberOfRows];\n                for (int j = 0; j < numberOfRows; j++) ret[i][j] = matrix[j][i];\n            }\n            return ret;\n        }\n\n        public static string[] ReadLines(int quantity)\n        {\n            string[] lines = new string[quantity];\n            for (int i = 0; i < quantity; i++) lines[i] = reader.ReadLine().Trim();\n            return lines;\n        }\n\n        public static void WriteArray<T>(IEnumerable<T> array)\n        {\n            writer.WriteLine(string.Join(\" \", array));\n        }\n\n        public static void Write(params object[] array)\n        {\n            WriteArray(array);\n        }\n        public static void WriteLines<T>(IEnumerable<T> array)\n        {\n            foreach (var a in array) writer.WriteLine(a);\n        }\n        private class SDictionary<TKey, TValue> : Dictionary<TKey, TValue>\n        {\n            public new TValue this[TKey key]\n            {\n                get { return ContainsKey(key) ? base[key] : default(TValue); }\n                set { base[key] = value; }\n            }\n        }\n        private static T[] Init<T>(int size) where T : new()\n        {\n            var ret = new T[size];\n            for (int i = 0; i < size; i++) ret[i] = new T();\n            return ret;\n        }\n        #endregion\n    }\n}\n\n\nProvide the fixed C# code without any description or extra tokens.\n\nFixed source code:",
            ""
        ]
    },
    "source_data": {
        "delete_cnt": 1,
        "fix_code_uid": "",
        "difficulty": 800,
        "replace_cnt": 0,
        "fix_ops_cnt": 2,
        "prob_desc_output_spec": "Print two integers\u00a0\u2014 the number of rows and columns on the display. ",
        "apr_id": "3a357ef97366620a945cbb567c3398cc",
        "bug_source_code": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Globalization;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\nusing System.Text.RegularExpressions;\n\nnamespace CP_CS\n{\n\n    class Task\n    {\n\n        static void Solve()\n        {\n            int n = ReadInt();\n            for (int i = (int)Math.Ceiling(Math.Sqrt(n)); i >= 1; i--)\n            {\n                if (n % i == 0)\n                {\n                    Write($\"{i} {n/i}\");\n                    return;\n                    ;\n                }   \n            }\n        }\n\n        static string[] Split(string str, int chunkSize)\n        {\n            return Enumerable.Range(0, str.Length / chunkSize)\n                .Select(i => str.Substring(i * chunkSize, chunkSize)).ToArray();\n        }\n\n        #region -- Main -- \n\n        private static TextReader reader;\n        private static TextWriter writer;\n\n        static void Main()\n        {\n#if DEBUG\n            //reader = new StreamReader(\"..\\\\..\\\\input.txt\");\n            reader = new StreamReader(Console.OpenStandardInput());\n            writer = Console.Out;\n            //writer = new StreamWriter(\"..\\\\..\\\\output.txt\");\n#else\n        reader = new StreamReader(Console.OpenStandardInput());\n        writer = new StreamWriter(Console.OpenStandardOutput());\n        //reader = new StreamReader(\"pluses.in\");\n        //writer = new StreamWriter(\"pluses.out\");\n#endif\n            try\n            {\n                //var thread = new Thread(new Solver().Solve, 1024 * 1024 * 128);\n                //thread.Start();\n                //thread.Join();\n                Solve();\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(ex);\n#if DEBUG\n#else\n            throw;\n#endif\n            }\n            reader.Close();\n            writer.Close();\n        }\n\n        #endregion\n        #region -- Read / Write --\n\n        private static Queue<string> currentLineTokens = new Queue<string>();\n\n        private static string[] ReadAndSplitLine()\n        {\n            return reader.ReadLine().Split(new[] { ' ', '\\t' }, StringSplitOptions.RemoveEmptyEntries);\n        }\n\n        private static string[] ReadAndSplitLine(char divisor)\n        {\n            return reader.ReadLine().Split(new[] { divisor }, StringSplitOptions.RemoveEmptyEntries);\n        }\n\n        public static string ReadToken()\n        {\n            while (currentLineTokens.Count == 0) currentLineTokens = new Queue<string>(ReadAndSplitLine());\n            return currentLineTokens.Dequeue();\n        }\n\n        public static int ReadInt()\n        {\n            return int.Parse(ReadToken());\n        }\n\n        public static long ReadLong()\n        {\n            return long.Parse(ReadToken());\n        }\n\n        //public static BigInteger ReadBigInteger()\n        //{\n        //    return BigInteger.Parse(ReadToken());\n        //}\n\n        public static double ReadDouble()\n        {\n            return double.Parse(ReadToken(), CultureInfo.InvariantCulture);\n        }\n\n        public static int[] ReadIntArray()\n        {\n            return ReadAndSplitLine().Select(int.Parse).ToArray();\n        }\n\n        public static bool[] ReadBoolArray()\n        {\n            return ReadAndSplitLine().ToString().ToCharArray().Select(chr => chr == '1').ToArray();\n        }\n\n        public static long[] ReadLongArray()\n        {\n            return ReadAndSplitLine().Select(long.Parse).ToArray();\n        }\n\n        public static double[] ReadDoubleArray()\n        {\n            return ReadAndSplitLine().Select(s => double.Parse(s, CultureInfo.InvariantCulture)).ToArray();\n        }\n\n        public static int[][] ReadIntMatrix(int numberOfRows)\n        {\n            int[][] matrix = new int[numberOfRows][];\n            for (int i = 0; i < numberOfRows; i++) matrix[i] = ReadIntArray();\n            return matrix;\n        }\n\n        public static bool[][] ReadBoolMatrix(int numberOfRows)\n        {\n            bool[][] matrix = new bool[numberOfRows][];\n            for (int i = 0; i < numberOfRows; i++)\n                matrix[i] = ReadBoolArray();\n            return matrix;\n        }\n\n        public static bool[][] TransposeBoolMatrix(bool[][] array, int numberOfRows)\n        {\n            bool[][] matrix = array;\n            bool[][] ret = new bool[matrix[0].Length][];\n            for (int i = 0; i < ret.Length; i++)\n            {\n                ret[i] = new bool[numberOfRows];\n                for (int j = 0; j < numberOfRows; j++) ret[i][j] = matrix[j][i];\n            }\n            return ret;\n        }\n\n\n        public static int[][] ReadAndTransposeIntMatrix(int numberOfRows)\n        {\n            int[][] matrix = ReadIntMatrix(numberOfRows);\n            int[][] ret = new int[matrix[0].Length][];\n            for (int i = 0; i < ret.Length; i++)\n            {\n                ret[i] = new int[numberOfRows];\n                for (int j = 0; j < numberOfRows; j++) ret[i][j] = matrix[j][i];\n            }\n            return ret;\n        }\n\n        public static string[] ReadLines(int quantity)\n        {\n            string[] lines = new string[quantity];\n            for (int i = 0; i < quantity; i++) lines[i] = reader.ReadLine().Trim();\n            return lines;\n        }\n\n        public static void WriteArray<T>(IEnumerable<T> array)\n        {\n            writer.WriteLine(string.Join(\" \", array));\n        }\n\n        public static void Write(params object[] array)\n        {\n            WriteArray(array);\n        }\n        public static void WriteLines<T>(IEnumerable<T> array)\n        {\n            foreach (var a in array) writer.WriteLine(a);\n        }\n        private class SDictionary<TKey, TValue> : Dictionary<TKey, TValue>\n        {\n            public new TValue this[TKey key]\n            {\n                get { return ContainsKey(key) ? base[key] : default(TValue); }\n                set { base[key] = value; }\n            }\n        }\n        private static T[] Init<T>(int size) where T : new()\n        {\n            var ret = new T[size];\n            for (int i = 0; i < size; i++) ret[i] = new T();\n            return ret;\n        }\n        #endregion\n    }\n}\n",
        "prob_desc_input_spec": "The first line contains the positive integer n (1\u2009\u2264\u2009n\u2009\u2264\u2009106)\u00a0\u2014 the number of pixels display should have.",
        "src_uid": "f52af273954798a4ae38a1378bfbf77a",
        "bug_code_uid": "2817f43de74bac847cc744ba432c25be",
        "equal_cnt": 3,
        "prob_desc_time_limit": "1 second",
        "similarity_score": 0.9892577528953552,
        "bug_exec_outcome": "WRONG_ANSWER",
        "lang_cluster": "C#",
        "potential_dominant_fix_op": "delete",
        "prob_desc_sample_inputs": [
            "8",
            "64",
            "5",
            "999999"
        ],
        "prob_desc_input_from": "standard input",
        "prob_desc_description": "A big company decided to launch a new series of rectangular displays, and decided that the display must have exactly n pixels. Your task is to determine the size of the rectangular display \u2014 the number of lines (rows) of pixels a and the number of columns of pixels b, so that:  there are exactly n pixels on the display;  the number of rows does not exceed the number of columns, it means a\u2009\u2264\u2009b;  the difference b\u2009-\u2009a is as small as possible. ",
        "lang": "MS C#",
        "fix_exec_outcome": "",
        "insert_cnt": 1,
        "fix_source_code": "",
        "prob_desc_notes": "NoteIn the first example the minimum possible difference equals 2, so on the display should be 2 rows of 4 pixels.In the second example the minimum possible difference equals 0, so on the display should be 8 rows of 8 pixels.In the third example the minimum possible difference equals 4, so on the display should be 1 row of 5 pixels.",
        "file_name": "C#.jsonl",
        "tags": [
            "math",
            "brute force"
        ],
        "prob_desc_output_to": "standard output",
        "prob_desc_created_at": "1482113100",
        "prob_desc_memory_limit": "256 megabytes",
        "prob_desc_sample_outputs": [
            "2 4",
            "8 8",
            "1 5",
            "999 1001"
        ],
        "hidden_unit_tests": "[{\"input\": \"8\\r\\n\", \"output\": [\"2 4\"]}, {\"input\": \"64\\r\\n\", \"output\": [\"8 8\"]}, {\"input\": \"5\\r\\n\", \"output\": [\"1 5\"]}, {\"input\": \"999999\\r\\n\", \"output\": [\"999 1001\"]}, {\"input\": \"716539\\r\\n\", \"output\": [\"97 7387\"]}, {\"input\": \"1\\r\\n\", \"output\": [\"1 1\"]}, {\"input\": \"2\\r\\n\", \"output\": [\"1 2\"]}, {\"input\": \"3\\r\\n\", \"output\": [\"1 3\"]}, {\"input\": \"4\\r\\n\", \"output\": [\"2 2\"]}, {\"input\": \"6\\r\\n\", \"output\": [\"2 3\"]}, {\"input\": \"7\\r\\n\", \"output\": [\"1 7\"]}, {\"input\": \"9\\r\\n\", \"output\": [\"3 3\"]}, {\"input\": \"10\\r\\n\", \"output\": [\"2 5\"]}, {\"input\": \"11\\r\\n\", \"output\": [\"1 11\"]}, {\"input\": \"12\\r\\n\", \"output\": [\"3 4\"]}, {\"input\": \"15\\r\\n\", \"output\": [\"3 5\"]}, {\"input\": \"100\\r\\n\", \"output\": [\"10 10\"]}, {\"input\": \"101\\r\\n\", \"output\": [\"1 101\"]}, {\"input\": \"169\\r\\n\", \"output\": [\"13 13\"]}, {\"input\": \"179\\r\\n\", \"output\": [\"1 179\"]}, {\"input\": \"190\\r\\n\", \"output\": [\"10 19\"]}, {\"input\": \"1000\\r\\n\", \"output\": [\"25 40\"]}, {\"input\": \"10000\\r\\n\", \"output\": [\"100 100\"]}, {\"input\": \"10001\\r\\n\", \"output\": [\"73 137\"]}, {\"input\": \"100000\\r\\n\", \"output\": [\"250 400\"]}, {\"input\": \"100001\\r\\n\", \"output\": [\"11 9091\"]}, {\"input\": \"1000000\\r\\n\", \"output\": [\"1000 1000\"]}, {\"input\": \"999983\\r\\n\", \"output\": [\"1 999983\"]}, {\"input\": \"524288\\r\\n\", \"output\": [\"512 1024\"]}, {\"input\": \"954493\\r\\n\", \"output\": [\"971 983\"]}, {\"input\": \"966289\\r\\n\", \"output\": [\"983 983\"]}, {\"input\": \"944663\\r\\n\", \"output\": [\"961 983\"]}, {\"input\": \"912673\\r\\n\", \"output\": [\"97 9409\"]}, {\"input\": \"732641\\r\\n\", \"output\": [\"679 1079\"]}, {\"input\": \"232897\\r\\n\", \"output\": [\"343 679\"]}, {\"input\": \"16807\\r\\n\", \"output\": [\"49 343\"]}, {\"input\": \"999958\\r\\n\", \"output\": [\"2 499979\"]}, {\"input\": \"990151\\r\\n\", \"output\": [\"1 990151\"]}, {\"input\": \"997002\\r\\n\", \"output\": [\"998 999\"]}, {\"input\": \"20\\r\\n\", \"output\": [\"4 5\"]}, {\"input\": \"20261\\r\\n\", \"output\": [\"1 20261\"]}, {\"input\": \"999123\\r\\n\", \"output\": [\"3 333041\"]}, {\"input\": \"901841\\r\\n\", \"output\": [\"1 901841\"]}]"
    }
}