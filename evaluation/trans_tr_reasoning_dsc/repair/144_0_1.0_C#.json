{
    "oai_response": null,
    "source_data": {
        "delete_cnt": 1,
        "fix_code_uid": "",
        "difficulty": 2200,
        "replace_cnt": 4,
        "fix_ops_cnt": 9,
        "prob_desc_output_spec": "Print a single integer \u2014 the expected value of the number on the blackboard after $$$k$$$ steps as $$$P \\cdot Q^{-1} \\pmod{10^9+7}$$$ for $$$P$$$, $$$Q$$$ defined above.",
        "apr_id": "6895d2ef42863430f189c7455f7cde4e",
        "bug_source_code": "using System;\nusing System.Collections.Generic;\nusing System.Collections;\n\nnamespace codeforces\n{\n\n    public class Program\n    {\n        private const int MOD = 1000 * 1000 * 1000 + 7;\n\n        private static int Add(int a, int b)\n        {\n            int result = a + b;\n            if (result >= MOD)\n            {\n                result -= MOD;\n            }\n            return result;\n        }\n\n        private static int Mult(int a, int b)\n        {\n            return (int)(1L * a * b % MOD);\n        }\n\n        private static int BinPow(int a, int n)\n        {\n            int result = 1;\n            while (n > 0)\n            {\n                if (n % 2 == 1)\n                {\n                    result = Mult(result, a);\n                }\n                a = Mult(a, a);\n                n /= 2;\n            }\n            return result;\n        }\n\n        private static List<KeyValuePair<long, int>> GetPrimes(long x)\n        {\n            var result = new List<KeyValuePair<long, int>>();\n            for (int i = 2; 1L * i * i <= x; ++i)\n            {\n                int count = 0;\n                while (x % i == 0)\n                {\n                    x /= i;\n                    count++;\n                }\n                if (count > 0)\n                {\n                    result.Add(new KeyValuePair<long, int>(i, count));\n                }\n            }\n            if (x > 1)\n            {\n                result.Add(new KeyValuePair<long, int>(x, 1));\n            }\n\n            return result;\n        }\n\n        private static void Main(string[] args)\n        {\n            var values = Console.ReadLine().Split(' ');\n            long n = Convert.ToInt64(values[0]);\n            int k = Convert.ToInt32(values[1]);\n\n            var primes = GetPrimes(n);\n            int mp = 0;\n            for (int i = 0; i < primes.Count; ++i)\n            {\n                mp = Math.Max(primes[i].Value, mp);\n            }\n            var dp = new int[k + 1, mp + 1];\n            int result = 1;\n            for (int i = 0; i < primes.Count; ++i)\n            {\n                var pair = primes[i];\n                for (int j = 0; j <= pair.Value; ++j)\n                {\n                    dp[0, j] = 0;\n                }\n                dp[0, pair.Value] = 1;\n                for (int l = 1; l <= k; ++l)\n                {\n                    for (int j = 0; j <= pair.Value; ++j)\n                    {\n                        dp[l, j] = 0;\n                        for (int r = j; r <= pair.Value; ++r)\n                        {\n                            int rr = BinPow(r + 1, MOD - 2);\n                            dp[l, j] = Add(dp[l, j], Mult(rr, dp[l - 1, r]));\n                        }\n                    }\n                }\n                int M = 0;\n                int p = 1;\n                int v = (int)(pair.Key % MOD);\n                for (int j = 0; j <= pair.Value; ++j)\n                {\n                    M = Add(M, Mult(dp[k, j], p));\n                    p = Mult(p, v);\n                }\n                result = Mult(result, M);\n            }\n            Console.WriteLine(result);\n        }\n    }\n}",
        "prob_desc_input_spec": "The only line of the input contains two integers $$$n$$$ and $$$k$$$ ($$$1 \\leq n \\leq 10^{15}$$$, $$$1 \\leq k \\leq 10^4$$$).",
        "src_uid": "dc466d9c24b7dcb37c0e99337b4124d2",
        "bug_code_uid": "10f1ce2b422d4155d59fdfe73e9e237b",
        "equal_cnt": 10,
        "prob_desc_time_limit": "2 seconds",
        "similarity_score": 0.8687343597412109,
        "bug_exec_outcome": "TIME_LIMIT_EXCEEDED",
        "lang_cluster": "C#",
        "potential_dominant_fix_op": "replace",
        "prob_desc_sample_inputs": [
            "6 1",
            "6 2",
            "60 5"
        ],
        "prob_desc_input_from": "standard input",
        "prob_desc_description": "Makoto has a big blackboard with a positive integer $$$n$$$ written on it. He will perform the following action exactly $$$k$$$ times:Suppose the number currently written on the blackboard is $$$v$$$. He will randomly pick one of the divisors of $$$v$$$ (possibly $$$1$$$ and $$$v$$$) and replace $$$v$$$ with this divisor. As Makoto uses his famous random number generator (RNG) and as he always uses $$$58$$$ as his generator seed, each divisor is guaranteed to be chosen with equal probability.He now wonders what is the expected value of the number written on the blackboard after $$$k$$$ steps.It can be shown that this value can be represented as $$$\\frac{P}{Q}$$$ where $$$P$$$ and $$$Q$$$ are coprime integers and $$$Q \\not\\equiv 0 \\pmod{10^9+7}$$$. Print the value of $$$P \\cdot Q^{-1}$$$ modulo $$$10^9+7$$$.",
        "lang": "Mono C#",
        "fix_exec_outcome": "",
        "insert_cnt": 4,
        "fix_source_code": "",
        "prob_desc_notes": "NoteIn the first example, after one step, the number written on the blackboard is $$$1$$$, $$$2$$$, $$$3$$$ or $$$6$$$ \u2014 each occurring with equal probability. Hence, the answer is $$$\\frac{1+2+3+6}{4}=3$$$.In the second example, the answer is equal to $$$1 \\cdot \\frac{9}{16}+2 \\cdot \\frac{3}{16}+3 \\cdot \\frac{3}{16}+6 \\cdot \\frac{1}{16}=\\frac{15}{8}$$$.",
        "file_name": "C#.jsonl",
        "tags": [
            "dp",
            "math",
            "probabilities",
            "number theory"
        ],
        "prob_desc_output_to": "standard output",
        "prob_desc_created_at": "1546613100",
        "prob_desc_memory_limit": "256 megabytes",
        "prob_desc_sample_outputs": [
            "3",
            "875000008",
            "237178099"
        ],
        "hidden_unit_tests": "[{\"input\": \"6 1\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"6 2\\r\\n\", \"output\": [\"875000008\"]}, {\"input\": \"60 5\\r\\n\", \"output\": [\"237178099\"]}, {\"input\": \"2 4\\r\\n\", \"output\": [\"562500005\"]}, {\"input\": \"12 3\\r\\n\", \"output\": [\"775462970\"]}, {\"input\": \"55 5\\r\\n\", \"output\": [\"789062507\"]}, {\"input\": \"935 9\\r\\n\", \"output\": [\"658825880\"]}, {\"input\": \"1 10000\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"120 1\\r\\n\", \"output\": [\"500000026\"]}, {\"input\": \"1000000000000000 10000\\r\\n\", \"output\": [\"215514159\"]}, {\"input\": \"671058194037157 8673\\r\\n\", \"output\": [\"298638658\"]}, {\"input\": \"900018062553298 4801\\r\\n\", \"output\": [\"345432320\"]}, {\"input\": \"128973636102142 5521\\r\\n\", \"output\": [\"99152648\"]}, {\"input\": \"999999999999993 8123\\r\\n\", \"output\": [\"868053217\"]}, {\"input\": \"260858031033600 9696\\r\\n\", \"output\": [\"692221824\"]}, {\"input\": \"562949953421312 9779\\r\\n\", \"output\": [\"98057767\"]}, {\"input\": \"357933504618282 1649\\r\\n\", \"output\": [\"197730476\"]}, {\"input\": \"586884783199831 5073\\r\\n\", \"output\": [\"883678085\"]}, {\"input\": \"187877211524483 8497\\r\\n\", \"output\": [\"562808746\"]}, {\"input\": \"866421317361600 10000\\r\\n\", \"output\": [\"82212846\"]}, {\"input\": \"782574093100800 9999\\r\\n\", \"output\": [\"293217028\"]}, {\"input\": \"577614211574400 9998\\r\\n\", \"output\": [\"681915605\"]}, {\"input\": \"65214507758400 9997\\r\\n\", \"output\": [\"677959603\"]}, {\"input\": \"963761198400 9996\\r\\n\", \"output\": [\"669401143\"]}, {\"input\": \"5587021440 9995\\r\\n\", \"output\": [\"360750834\"]}, {\"input\": \"17297280 9994\\r\\n\", \"output\": [\"94383698\"]}, {\"input\": \"7560 9993\\r\\n\", \"output\": [\"412712546\"]}, {\"input\": \"120 9992\\r\\n\", \"output\": [\"167656619\"]}, {\"input\": \"1 1\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"609359740010496 1337\\r\\n\", \"output\": [\"263703037\"]}, {\"input\": \"912750790581630 9876\\r\\n\", \"output\": [\"291557094\"]}, {\"input\": \"617673396283947 7777\\r\\n\", \"output\": [\"488769014\"]}, {\"input\": \"890604418498560 9119\\r\\n\", \"output\": [\"185509970\"]}, {\"input\": \"524288004718592 8888\\r\\n\", \"output\": [\"851726115\"]}, {\"input\": \"999999999999989 8998\\r\\n\", \"output\": [\"391873310\"]}, {\"input\": \"999999999999999 8123\\r\\n\", \"output\": [\"41003922\"]}, {\"input\": \"817237005720659 4233\\r\\n\", \"output\": [\"533017938\"]}, {\"input\": \"1000000007 1\\r\\n\", \"output\": [\"500000004\"]}, {\"input\": \"1000000007 2\\r\\n\", \"output\": [\"750000006\"]}, {\"input\": \"999999999999970 8998\\r\\n\", \"output\": [\"939941657\"]}, {\"input\": \"900000060000001 8123\\r\\n\", \"output\": [\"865356488\"]}, {\"input\": \"999011322032079 4233\\r\\n\", \"output\": [\"546309400\"]}, {\"input\": \"999005327998113 9119\\r\\n\", \"output\": [\"106270540\"]}, {\"input\": \"900000720000023 9876\\r\\n\", \"output\": [\"511266473\"]}]"
    }
}