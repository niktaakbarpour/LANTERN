{
    "oai_response": {
        "choices": [
            {
                "message": {
                    "role": "assistant",
                    "content": "```csharp\nusing System;\n\npublic class TriangleSolution\n{\n\tpublic static void Main()\n\t{\n\t\tstring input = Console.ReadLine();\n\t\tstring[] numbers = input.Split(' ');\n\t\tint[] sides = Array.ConvertAll(numbers, int.Parse);\n\t\tArray.Sort(sides);\n\t\t\n\t\tif(sides[0] + sides[1] <= sides[2])\n\t\t{\n\t\t\tConsole.WriteLine(0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tConsole.WriteLine(sides[2] - sides[0] + 1);\n\t}__}\ufeff_}\n\t\n\t\n\t\ufeff}\ufeff\ufeff\n```"
                }
            }
        ],
        "prompt": [
            "Fix a buggy program written in C# language to solve the following programming problem:\nDescription: Masha has three sticks of length $$$a$$$, $$$b$$$ and $$$c$$$ centimeters respectively. In one minute Masha can pick one arbitrary stick and increase its length by one centimeter. She is not allowed to break sticks.What is the minimum number of minutes she needs to spend increasing the stick's length in order to be able to assemble a triangle of positive area. Sticks should be used as triangle's sides (one stick for one side) and their endpoints should be located at triangle's vertices.\nInput Specification: The only line contains tree integers $$$a$$$, $$$b$$$ and $$$c$$$ ($$$1 \\leq a, b, c \\leq 100$$$)\u00a0\u2014 the lengths of sticks Masha possesses.\nOutput Specification: Print a single integer\u00a0\u2014 the minimum number of minutes that Masha needs to spend in order to be able to make the triangle of positive area from her sticks.\n\nSample Input:\n3 4 5\nSample Output:\n0\n\nSample Input:\n2 5 3\nSample Output:\n1\n\nSample Input:\n100 10 10\nSample Output:\n81\n\nNotes: NoteIn the first example, Masha can make a triangle from the sticks without increasing the length of any of them.In the second example, Masha can't make a triangle of positive area from the sticks she has at the beginning, but she can spend one minute to increase the length $$$2$$$ centimeter stick by one and after that form a triangle with sides $$$3$$$, $$$3$$$ and $$$5$$$ centimeters.In the third example, Masha can take $$$33$$$ minutes to increase one of the $$$10$$$ centimeters sticks by $$$33$$$ centimeters, and after that take $$$48$$$ minutes to increase another $$$10$$$ centimeters stick by $$$48$$$ centimeters. This way she can form a triangle with lengths $$$43$$$, $$$58$$$ and $$$100$$$ centimeters in $$$81$$$ minutes. One can show that it is impossible to get a valid triangle faster.\nTake input from standard input and output to standard output\n\nHere is the code with a bug of WRONG_ANSWER:\n\nusing System;\n\npublic static class TriangleSolution\n{\n\tpublic static string Numbers = Console.ReadLine();\n\tpublic static int Length = Numbers.Length;\n\tpublic static int CurrentSide = 1;\n\tpublic static string[] separateNumbers = new string[3];\n\tpublic static int[] integerNumbers = new int[3];\n\tpublic static int numberOfMinutes = 1;\n\tpublic static int shortestSide1;\n\tpublic static int shortestSide2;\n\tpublic static int longestSide;\n\tpublic static void getSideLengths()\n\t{\n\t\tchar letter = '0';\n\t\tfor(int i = 0; i < Length; i++)\n\t\t{\n\t\t\tletter = Numbers[i];\n\t\t\tif(letter == ' ')\n\t\t\t{\n\t\t\t\tCurrentSide = CurrentSide + 1;\n\t\t\t\t\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t\n\t\t\t\tseparateNumbers[CurrentSide - 1] = separateNumbers[CurrentSide - 1] + letter + \"\";\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n\tpublic static void convertArrayToInteger(string[] chosenArray, int[] targetArray)\n\t{\n\t\tfor(int i = 0; i < chosenArray.Length; i++)\n\t\t{\n\t\t\ttargetArray[i] = int.Parse(chosenArray[i]);\n\t\t}\n\t}\n\tpublic static void declareSides(int sideShorter, int sideShorter2, int sideLonger)\n\t{\n\t\tshortestSide1 = sideShorter;\n\t\tshortestSide2 = sideShorter2;\n\t\tlongestSide = sideLonger;\n\t}\n\tpublic static void orderSides(int[] integerSideLengths)\n\t{\n\t\t\tif(integerSideLengths[0] > integerSideLengths[1])\n\t\t\t{\n\t\t\t\tif(integerSideLengths[0] > integerSideLengths[2])\n\t\t\t\t{\n\t\t\t\t\tif(integerSideLengths[1] > integerSideLengths[2])\n\t\t\t\t\t\tdeclareSides(integerSideLengths[2],integerSideLengths[1],integerSideLengths[0]);\n\t\t\t\t\telse declareSides(integerSideLengths[1],integerSideLengths[2],integerSideLengths[0]);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdeclareSides(integerSideLengths[1],integerSideLengths[0],integerSideLengths[2]);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (integerSideLengths[0] > integerSideLengths[2])\n\t\t\t\tdeclareSides(integerSideLengths[0],integerSideLengths[2],integerSideLengths[1]);\n\t\t\telse\n\t\t\t{\n\t\t\t\tdeclareSides(integerSideLengths[0],integerSideLengths[1],integerSideLengths[2]);\n\t\t\t}\n\t}\n\tpublic static void Main()\n\t{\n\t\tgetSideLengths();\n\t\tconvertArrayToInteger(separateNumbers, integerNumbers);\n\t\t//Console.WriteLine(separateNumbers[2]);\n\t\torderSides(integerNumbers);\n\t\t//Console.WriteLine(integerNumbers[2]);\n\t\t//Console.WriteLine(longestSide + \"\" + shortestSide1 + \"\" + shortestSide2);\n\t\tnumberOfMinutes = (longestSide - shortestSide1) - shortestSide2;\n\t\tif(numberOfMinutes < 0)\n\t\t{\n\t\t\tnumberOfMinutes = 0;\n\t\t}\n\t\telse numberOfMinutes++;\n\t\t/*Console.WriteLine(Numbers);\n\t\tConsole.WriteLine(separateNumbers[1]);\n\t\tConsole.WriteLine(integerNumbers[1]);\n\t\tConsole.WriteLine(longestSide + \" \" + shortestSide1);*/\n\t\tConsole.WriteLine(numberOfMinutes);\n\t}\n\t\n}\n\nProvide the fixed C# code without any description or extra tokens.\n\nFixed source code:",
            ""
        ]
    },
    "source_data": {
        "delete_cnt": 1,
        "fix_code_uid": "",
        "difficulty": 800,
        "replace_cnt": 1,
        "fix_ops_cnt": 6,
        "prob_desc_output_spec": "Print a single integer\u00a0\u2014 the minimum number of minutes that Masha needs to spend in order to be able to make the triangle of positive area from her sticks.",
        "apr_id": "1b98b5acee122ae5f73475a3a4341811",
        "bug_source_code": "using System;\n\npublic static class TriangleSolution\n{\n\tpublic static string Numbers = Console.ReadLine();\n\tpublic static int Length = Numbers.Length;\n\tpublic static int CurrentSide = 1;\n\tpublic static string[] separateNumbers = new string[3];\n\tpublic static int[] integerNumbers = new int[3];\n\tpublic static int numberOfMinutes = 1;\n\tpublic static int shortestSide1;\n\tpublic static int shortestSide2;\n\tpublic static int longestSide;\n\tpublic static void getSideLengths()\n\t{\n\t\tchar letter = '0';\n\t\tfor(int i = 0; i < Length; i++)\n\t\t{\n\t\t\tletter = Numbers[i];\n\t\t\tif(letter == ' ')\n\t\t\t{\n\t\t\t\tCurrentSide = CurrentSide + 1;\n\t\t\t\t\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t\n\t\t\t\tseparateNumbers[CurrentSide - 1] = separateNumbers[CurrentSide - 1] + letter + \"\";\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n\tpublic static void convertArrayToInteger(string[] chosenArray, int[] targetArray)\n\t{\n\t\tfor(int i = 0; i < chosenArray.Length; i++)\n\t\t{\n\t\t\ttargetArray[i] = int.Parse(chosenArray[i]);\n\t\t}\n\t}\n\tpublic static void declareSides(int sideShorter, int sideShorter2, int sideLonger)\n\t{\n\t\tshortestSide1 = sideShorter;\n\t\tshortestSide2 = sideShorter2;\n\t\tlongestSide = sideLonger;\n\t}\n\tpublic static void orderSides(int[] integerSideLengths)\n\t{\n\t\t\tif(integerSideLengths[0] > integerSideLengths[1])\n\t\t\t{\n\t\t\t\tif(integerSideLengths[0] > integerSideLengths[2])\n\t\t\t\t{\n\t\t\t\t\tif(integerSideLengths[1] > integerSideLengths[2])\n\t\t\t\t\t\tdeclareSides(integerSideLengths[2],integerSideLengths[1],integerSideLengths[0]);\n\t\t\t\t\telse declareSides(integerSideLengths[1],integerSideLengths[2],integerSideLengths[0]);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdeclareSides(integerSideLengths[1],integerSideLengths[0],integerSideLengths[2]);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (integerSideLengths[0] > integerSideLengths[2])\n\t\t\t\tdeclareSides(integerSideLengths[0],integerSideLengths[2],integerSideLengths[1]);\n\t\t\telse\n\t\t\t{\n\t\t\t\tdeclareSides(integerSideLengths[0],integerSideLengths[1],integerSideLengths[2]);\n\t\t\t}\n\t}\n\tpublic static void Main()\n\t{\n\t\tgetSideLengths();\n\t\tconvertArrayToInteger(separateNumbers, integerNumbers);\n\t\t//Console.WriteLine(separateNumbers[2]);\n\t\torderSides(integerNumbers);\n\t\t//Console.WriteLine(integerNumbers[2]);\n\t\t//Console.WriteLine(longestSide + \"\" + shortestSide1 + \"\" + shortestSide2);\n\t\tnumberOfMinutes = (longestSide - shortestSide1) - shortestSide2;\n\t\tif(numberOfMinutes < 0)\n\t\t{\n\t\t\tnumberOfMinutes = 0;\n\t\t}\n\t\telse numberOfMinutes++;\n\t\t/*Console.WriteLine(Numbers);\n\t\tConsole.WriteLine(separateNumbers[1]);\n\t\tConsole.WriteLine(integerNumbers[1]);\n\t\tConsole.WriteLine(longestSide + \" \" + shortestSide1);*/\n\t\tConsole.WriteLine(numberOfMinutes);\n\t}\n\t\n}",
        "prob_desc_input_spec": "The only line contains tree integers $$$a$$$, $$$b$$$ and $$$c$$$ ($$$1 \\leq a, b, c \\leq 100$$$)\u00a0\u2014 the lengths of sticks Masha possesses.",
        "src_uid": "3dc56bc08606a39dd9ca40a43c452f09",
        "bug_code_uid": "c292b4099e0dc4194e9befd7e55a7946",
        "equal_cnt": 7,
        "prob_desc_time_limit": "2 seconds",
        "similarity_score": 0.9542533159255981,
        "bug_exec_outcome": "WRONG_ANSWER",
        "lang_cluster": "C#",
        "potential_dominant_fix_op": "insert",
        "prob_desc_sample_inputs": [
            "3 4 5",
            "2 5 3",
            "100 10 10"
        ],
        "prob_desc_input_from": "standard input",
        "prob_desc_description": "Masha has three sticks of length $$$a$$$, $$$b$$$ and $$$c$$$ centimeters respectively. In one minute Masha can pick one arbitrary stick and increase its length by one centimeter. She is not allowed to break sticks.What is the minimum number of minutes she needs to spend increasing the stick's length in order to be able to assemble a triangle of positive area. Sticks should be used as triangle's sides (one stick for one side) and their endpoints should be located at triangle's vertices.",
        "lang": "Mono C#",
        "fix_exec_outcome": "",
        "insert_cnt": 4,
        "fix_source_code": "",
        "prob_desc_notes": "NoteIn the first example, Masha can make a triangle from the sticks without increasing the length of any of them.In the second example, Masha can't make a triangle of positive area from the sticks she has at the beginning, but she can spend one minute to increase the length $$$2$$$ centimeter stick by one and after that form a triangle with sides $$$3$$$, $$$3$$$ and $$$5$$$ centimeters.In the third example, Masha can take $$$33$$$ minutes to increase one of the $$$10$$$ centimeters sticks by $$$33$$$ centimeters, and after that take $$$48$$$ minutes to increase another $$$10$$$ centimeters stick by $$$48$$$ centimeters. This way she can form a triangle with lengths $$$43$$$, $$$58$$$ and $$$100$$$ centimeters in $$$81$$$ minutes. One can show that it is impossible to get a valid triangle faster.",
        "file_name": "C#.jsonl",
        "tags": [
            "geometry",
            "math",
            "brute force"
        ],
        "prob_desc_output_to": "standard output",
        "prob_desc_created_at": "1539511500",
        "prob_desc_memory_limit": "256 megabytes",
        "prob_desc_sample_outputs": [
            "0",
            "1",
            "81"
        ],
        "hidden_unit_tests": "[{\"input\": \"3 4 5\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"2 5 3\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"100 10 10\\r\\n\", \"output\": [\"81\"]}, {\"input\": \"1 1 1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"100 100 100\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"100 1 1\\r\\n\", \"output\": [\"99\"]}, {\"input\": \"12 34 56\\r\\n\", \"output\": [\"11\"]}, {\"input\": \"68 1 67\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"100 100 1\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"100 1 99\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"23 56 33\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"98 12 23\\r\\n\", \"output\": [\"64\"]}, {\"input\": \"88 2 6\\r\\n\", \"output\": [\"81\"]}, {\"input\": \"1 50 87\\r\\n\", \"output\": [\"37\"]}, {\"input\": \"1 50 100\\r\\n\", \"output\": [\"50\"]}, {\"input\": \"1 92 13\\r\\n\", \"output\": [\"79\"]}, {\"input\": \"56 42 87\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"100 100 99\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"3 1 1\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"14 21 76\\r\\n\", \"output\": [\"42\"]}, {\"input\": \"1 7 35\\r\\n\", \"output\": [\"28\"]}, {\"input\": \"86 43 10\\r\\n\", \"output\": [\"34\"]}, {\"input\": \"2 10 2\\r\\n\", \"output\": [\"7\"]}, {\"input\": \"32 99 10\\r\\n\", \"output\": [\"58\"]}, {\"input\": \"2 3 6\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"4 5 6\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"4 2 7\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"2 5 2\\r\\n\", \"output\": [\"2\"]}]"
    }
}