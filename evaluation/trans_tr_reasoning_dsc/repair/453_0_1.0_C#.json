{
    "oai_response": {
        "choices": [
            {
                "message": {
                    "role": "assistant",
                    "content": "```csharp\n\ufeffusing System;\n\nnamespace Turn\n{\n    internal class Program\n    {\n        private static void Main(string[] args)\n        {\n            long n = long.Parse(Console.ReadLine());\n            n %= 360;\n            if (n < 0) n += 360;\n\n            Console.WriteLine((45 - n % 45) % 45 < 45 ? (n + 45) / 90 % 4 : (n + 225) / 90 % 4);\n        }\n    }\n}\n```"
                }
            }
        ],
        "prompt": [
            "Fix a buggy program written in C# language to solve the following programming problem:\nDescription: Vasya started working in a machine vision company of IT City. Vasya's team creates software and hardware for identification of people by their face.One of the project's know-how is a camera rotating around its optical axis on shooting. People see an eye-catching gadget \u2014 a rotating camera \u2014 come up to it to see it better, look into it. And the camera takes their photo at that time. What could be better for high quality identification?But not everything is so simple. The pictures from camera appear rotated too (on clockwise camera rotation frame the content becomes rotated counter-clockwise). But the identification algorithm can work only with faces that are just slightly deviated from vertical.Vasya was entrusted to correct the situation \u2014 to rotate a captured image so that image would be minimally deviated from vertical. Requirements were severe. Firstly, the picture should be rotated only on angle divisible by 90 degrees to not lose a bit of information about the image. Secondly, the frames from the camera are so huge and FPS is so big that adequate rotation speed is provided by hardware FPGA solution only. And this solution can rotate only by 90 degrees clockwise. Of course, one can apply 90 degrees turn several times but for the sake of performance the number of turns should be minimized.Help Vasya implement the program that by the given rotation angle of the camera can determine the minimum number of 90 degrees clockwise turns necessary to get a picture in which up direction deviation from vertical is minimum.The next figure contains frames taken from an unrotated camera, then from rotated 90 degrees clockwise, then from rotated 90 degrees counter-clockwise. Arrows show direction to \"true up\".  The next figure shows 90 degrees clockwise turn by FPGA hardware.  \nInput Specification: The only line of the input contains one integer x (\u2009-\u20091018\u2009\u2264\u2009x\u2009\u2264\u20091018) \u2014 camera angle in degrees. Positive value denotes clockwise camera rotation, negative \u2014 counter-clockwise.\nOutput Specification: Output one integer \u2014 the minimum required number of 90 degrees clockwise turns.\n\nSample Input:\n60\nSample Output:\n1\n\nSample Input:\n-60\nSample Output:\n3\n\nNotes: NoteWhen the camera is rotated 60 degrees counter-clockwise (the second example), an image from it is rotated 60 degrees clockwise. One 90 degrees clockwise turn of the image result in 150 degrees clockwise total rotation and deviation from \"true up\" for one turn is 150 degrees. Two 90 degrees clockwise turns of the image result in 240 degrees clockwise total rotation and deviation from \"true up\" for two turns is 120 degrees because 240 degrees clockwise equal to 120 degrees counter-clockwise. Three 90 degrees clockwise turns of the image result in 330 degrees clockwise total rotation and deviation from \"true up\" for three turns is 30 degrees because 330 degrees clockwise equal to 30 degrees counter-clockwise.From 60, 150, 120 and 30 degrees deviations the smallest is 30, and it it achieved in three 90 degrees clockwise turns.\nTake input from standard input and output to standard output\n\nHere is the code with a bug of WRONG_ANSWER:\n\n\ufeffusing System;\nusing System.IO;\nusing System.Text;\n\nnamespace Turn\n{\n    internal class Program\n    {\n        private static readonly StreamReader reader = new StreamReader(Console.OpenStandardInput(1024*10), Encoding.ASCII, false, 1024*10);\n        private static readonly StreamWriter writer = new StreamWriter(Console.OpenStandardOutput(1024*10), Encoding.ASCII, 1024*10);\n\n        private static void Main(string[] args)\n        {\n            long n = long.Parse(reader.ReadLine());\n\n            n %= 360;\n\n            if (n >= 0)\n            {\n                if (n <= 45)\n                    writer.WriteLine(\"0\");\n                else if (n <= 45 + 90)\n                    writer.WriteLine(\"1\");\n                else if (n <= 45 + 180)\n                    writer.WriteLine(\"2\");\n                else\n                    writer.WriteLine(\"3\");\n            }\n            else\n            {\n                if (n >= -45)\n                    writer.WriteLine(\"0\");\n                else if (n > -45 - 90)\n                    writer.WriteLine(\"3\");\n                else if (n > -45 - 180)\n                    writer.WriteLine(\"2\");\n                else\n                    writer.WriteLine(\"1\");\n            }\n\n\n            writer.WriteLine();\n            writer.Flush();\n        }\n    }\n}\n\nProvide the fixed C# code without any description or extra tokens.\n\nFixed source code:",
            ""
        ]
    },
    "source_data": {
        "delete_cnt": 0,
        "fix_code_uid": "",
        "difficulty": 1800,
        "replace_cnt": 0,
        "fix_ops_cnt": 5,
        "prob_desc_output_spec": "Output one integer \u2014 the minimum required number of 90 degrees clockwise turns.",
        "apr_id": "41ced73894f4248419f0bb1f708fa348",
        "bug_source_code": "\ufeffusing System;\nusing System.IO;\nusing System.Text;\n\nnamespace Turn\n{\n    internal class Program\n    {\n        private static readonly StreamReader reader = new StreamReader(Console.OpenStandardInput(1024*10), Encoding.ASCII, false, 1024*10);\n        private static readonly StreamWriter writer = new StreamWriter(Console.OpenStandardOutput(1024*10), Encoding.ASCII, 1024*10);\n\n        private static void Main(string[] args)\n        {\n            long n = long.Parse(reader.ReadLine());\n\n            n %= 360;\n\n            if (n >= 0)\n            {\n                if (n <= 45)\n                    writer.WriteLine(\"0\");\n                else if (n <= 45 + 90)\n                    writer.WriteLine(\"1\");\n                else if (n <= 45 + 180)\n                    writer.WriteLine(\"2\");\n                else\n                    writer.WriteLine(\"3\");\n            }\n            else\n            {\n                if (n >= -45)\n                    writer.WriteLine(\"0\");\n                else if (n > -45 - 90)\n                    writer.WriteLine(\"3\");\n                else if (n > -45 - 180)\n                    writer.WriteLine(\"2\");\n                else\n                    writer.WriteLine(\"1\");\n            }\n\n\n            writer.WriteLine();\n            writer.Flush();\n        }\n    }\n}",
        "prob_desc_input_spec": "The only line of the input contains one integer x (\u2009-\u20091018\u2009\u2264\u2009x\u2009\u2264\u20091018) \u2014 camera angle in degrees. Positive value denotes clockwise camera rotation, negative \u2014 counter-clockwise.",
        "src_uid": "509db9cb6156b692557ba874a09f150e",
        "bug_code_uid": "08fcfad27f56fa6b8749de220bdadd30",
        "equal_cnt": 6,
        "prob_desc_time_limit": "0.5 seconds",
        "similarity_score": 0.9158679246902466,
        "bug_exec_outcome": "WRONG_ANSWER",
        "lang_cluster": "C#",
        "potential_dominant_fix_op": "insert",
        "prob_desc_sample_inputs": [
            "60",
            "-60"
        ],
        "prob_desc_input_from": "standard input",
        "prob_desc_description": "Vasya started working in a machine vision company of IT City. Vasya's team creates software and hardware for identification of people by their face.One of the project's know-how is a camera rotating around its optical axis on shooting. People see an eye-catching gadget \u2014 a rotating camera \u2014 come up to it to see it better, look into it. And the camera takes their photo at that time. What could be better for high quality identification?But not everything is so simple. The pictures from camera appear rotated too (on clockwise camera rotation frame the content becomes rotated counter-clockwise). But the identification algorithm can work only with faces that are just slightly deviated from vertical.Vasya was entrusted to correct the situation \u2014 to rotate a captured image so that image would be minimally deviated from vertical. Requirements were severe. Firstly, the picture should be rotated only on angle divisible by 90 degrees to not lose a bit of information about the image. Secondly, the frames from the camera are so huge and FPS is so big that adequate rotation speed is provided by hardware FPGA solution only. And this solution can rotate only by 90 degrees clockwise. Of course, one can apply 90 degrees turn several times but for the sake of performance the number of turns should be minimized.Help Vasya implement the program that by the given rotation angle of the camera can determine the minimum number of 90 degrees clockwise turns necessary to get a picture in which up direction deviation from vertical is minimum.The next figure contains frames taken from an unrotated camera, then from rotated 90 degrees clockwise, then from rotated 90 degrees counter-clockwise. Arrows show direction to \"true up\".  The next figure shows 90 degrees clockwise turn by FPGA hardware.  ",
        "lang": "MS C#",
        "fix_exec_outcome": "",
        "insert_cnt": 5,
        "fix_source_code": "",
        "prob_desc_notes": "NoteWhen the camera is rotated 60 degrees counter-clockwise (the second example), an image from it is rotated 60 degrees clockwise. One 90 degrees clockwise turn of the image result in 150 degrees clockwise total rotation and deviation from \"true up\" for one turn is 150 degrees. Two 90 degrees clockwise turns of the image result in 240 degrees clockwise total rotation and deviation from \"true up\" for two turns is 120 degrees because 240 degrees clockwise equal to 120 degrees counter-clockwise. Three 90 degrees clockwise turns of the image result in 330 degrees clockwise total rotation and deviation from \"true up\" for three turns is 30 degrees because 330 degrees clockwise equal to 30 degrees counter-clockwise.From 60, 150, 120 and 30 degrees deviations the smallest is 30, and it it achieved in three 90 degrees clockwise turns.",
        "file_name": "C#.jsonl",
        "tags": [
            "geometry",
            "math"
        ],
        "prob_desc_output_to": "standard output",
        "prob_desc_created_at": "1455807600",
        "prob_desc_memory_limit": "64 megabytes",
        "prob_desc_sample_outputs": [
            "1",
            "3"
        ],
        "hidden_unit_tests": "[{\"input\": \"60\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"-60\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"0\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"44\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"45\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"46\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"134\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"135\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"136\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"224\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"225\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"226\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"227\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"313\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"314\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"315\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"316\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"358\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"359\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"360\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"361\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"999999999999999340\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"999999999999999325\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"999999999999999326\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"999999999999999415\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"999999999999999416\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"999999999999999504\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"999999999999999505\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"999999999999999506\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"999999999999999594\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"999999999999999595\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"999999999999999596\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"999999999999999639\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"999999999999999640\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"6678504591813508\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"201035370138545377\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"441505850043460771\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"252890591709237675\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"272028913373922389\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"141460527912396122\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"479865961765156498\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"-44\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"-45\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"-46\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"-134\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"-135\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"-136\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"-224\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"-225\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"-226\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"-227\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"-313\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"-314\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"-315\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"-316\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"-358\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"-359\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"-360\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"-361\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"-999999999999999340\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"-999999999999999325\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"-999999999999999326\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"-999999999999999415\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"-999999999999999416\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"-999999999999999504\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"-999999999999999505\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"-999999999999999506\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"-999999999999999594\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"-999999999999999595\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"-999999999999999596\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"-999999999999999639\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"-999999999999999640\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"-6678504591813508\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"-201035370138545377\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"-441505850043460771\\r\\n\", \"output\": [\"3\"]}, {\"input\": \"-252890591709237675\\r\\n\", \"output\": [\"2\"]}, {\"input\": \"-272028913373922389\\r\\n\", \"output\": [\"1\"]}, {\"input\": \"-141460527912396122\\r\\n\", \"output\": [\"0\"]}, {\"input\": \"-479865961765156498\\r\\n\", \"output\": [\"2\"]}]"
    }
}